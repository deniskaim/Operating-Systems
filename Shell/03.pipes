
Task: 03-a-0200.txt
Сортирайте /etc/passwd лексикографски по поле UserID.

Solution:
1) sort -t ':' -k 3,3 /etc/passwd
2) cat /etc/passwd | sort -t ':' -k 3,3

--------------------

Task:  03-a-0201.txt
Сортирайте /etc/passwd числово по поле UserID.
(Открийте разликите с лексикографската сортировка)

Solution:
1) sort -n -t ':' -k 3,3 /etc/passwd
2) cat /etc/passwd | sort -n -t ':' -k 3,3

--------------------

Task: 03-a-0210.txt
Изведете само 1-ва и 5-та колона на файла /etc/passwd спрямо разделител ":".

Solution:
1) cut -d ':' -f 1,5 /etc/passwd
2) cat /etc/passwd | cut -d ':' -f 1,5

--------------------

Task: 03-a-0211.txt
Изведете съдържанието на файла /etc/passwd от 2-ри до 6-ти символ.

Solution:
cat /etc/passwd | tr -d '\n' | cut -c 2-6

--------------------

Task: 03-a-0212.txt
Отпечатайте потребителските имена и техните home директории от /etc/passwd.

Solution:
1) cut -d ':' -f 1,6 /etc/passwd
2) cat /etc/passwd | cut -d ':' -f 1,6

--------------------

Task: 03-a-0213.txt
Отпечатайте втората колона на /etc/passwd, разделена спрямо символ '/'.

Solution:
1) cut -d '/' -f 2 /etc/passwd
2) cat /etc/passwd | cut -d '/' -f 2

--------------------

Task: 03-a-1500.txt
Изведете броя на байтовете в /etc/passwd.
Изведете броя на символите в /etc/passwd.
Изведете броя на редовете  в /etc/passwd.

Solution:
wc -c -m -l /etc/passwd
или
cat /etc/passwd | wc -c
cat /etc/passwd | wc -m
cat /etc/passwd | wc -l
или
cat /etc/passwd | wc -c -m -l
--------------------

Task: 03-a-2000.txt
С отделни команди, извадете от файл /etc/passwd:
- първите 12 реда
- първите 26 символа
- всички редове, освен последните 4
- последните 17 реда
- 151-я ред (или друг произволен, ако нямате достатъчно редове)
- последните 4 символа от 13-ти ред (символът за нов ред не е част от реда)

Solution:
head -n 12 /etc/passwd
cat /etc/passwd | tr -d '\n' | cut -c 1-26
head -n -4 /etc/passwd
tail -n 17 /etc/passwd
head -n 151 /etc/passwd | tail -n 1
head -n 13 /etc/passwd | tail -n 1 | rev | cut -c 1-4 | rev 

--------------------

Task:  03-a-3000.txt
Запаметете във файл в своята home директория резултатът от командата `df -P`.

Напишете команда, която извежда на екрана съдържанието на този файл, без първия ред (хедъра), сортирано по второ поле (numeric).

Solution:
df -P > ~/03-a-3000_result.txt
cat ~/03-a-3000_result.txt | tail -n +2 | tr -s ' ' | sort -n -t ' ' -k 2,2

--------------------

Task:  03-a-3100.txt
Запазете само потребителските имена от /etc/passwd във файл users във вашата home директория.

Solution:
cat /etc/passwd | cut -d ':' -f 1 > ~/users

--------------------

Task: 03-a-3500.txt
Изпишете всички usernames от /etc/passwd с главни букви.

Solution:
cat /etc/passwd | cut -d ':' -f 1 | tr a-z A-Z

--------------------

Task: 03-a-5000.txt
1) Изведете реда от /etc/passwd, на който има информация за вашия потребител.

2) Изведедете този ред и двата реда преди него.

3) Изведете този ред, двата преди него, и трите след него.

4) Изведете *само* реда, който се намира 2 реда преди реда, съдържащ информация за вашия потребител.

Solution:
1) grep $(id -un) /etc/passwd
2) grep $(id -un) -B 2 /etc/passwd
3) grep $(id -un) -B 2 -A 3 /etc/passwd
4) grep $(id -un) -B 2 /etc/passwd | head -n 1
Добра практика: grep "^$(id -un)" /etc/passwd или grep "^$(whoami)" /etc/passwd
--------------------

Task: 03-a-5001.txt
Изведете колко потребители не изпозват /bin/bash за login shell според /etc/passwd

Solution:
1) grep -v -c '/bin/bash' /etc/passwd
2) grep -v '/bin/bash' /etc/passwd | wc -l

--------------------

Task: 03-a-5002.txt
Изведете само имената на хората с второ име по-дълго от 6 (>6) символа според /etc/passwd

Solution:
cat /etc/passwd | cut -d ':' -f 5 | grep -E -o '^[^ ]+ [^ ,]{7,}'

--------------------

Task: 03-a-5003.txt
Изведете имената на хората с второ име по-късо от 8 (<=7) символа според /etc/passwd // !(>7) = ?

Solution:
cat /etc/passwd | cut -d ':' -f 5 | cut -d ',' -f 1 | grep -E -o '^[^ ]+ [^ ,]{1,7}$'

--------------------

Task: 03-a-5004.txt
Изведете целите редове от /etc/passwd за хората от 03-a-5003

Solution:
grep -E "$(cut -d ':' -f 5 /etc/passwd | cut -d ',' -f 1 | grep -E -o '^[^ ]+ [^ ,]{1,7}$')" /etc/passwd

--------------------

Task:  03-a-6000.txt
Копирайте <РЕПО>/exercises/data/emp.data във вашата home директория.
Посредством awk, използвайки копирания файл за входнни данни, изведете:

- общия брой редове
- третия ред
- последното поле от всеки ред
- последното поле на последния ред
- всеки ред, който има повече от 4 полета
- всеки ред, чието последно поле е по-голямо от 4
- общия брой полета във всички редове
- броя редове, в които се среща низът Beth
- най-голямото трето поле и редът, който го съдържа
- всеки ред, който има поне едно поле
- всеки ред, който има повече от 17 знака
- броя на полетата във всеки ред и самият ред
- първите две полета от всеки ред, с разменени места
- всеки ред така, че първите две полета да са с разменени места
- всеки ред така, че на мястото на първото поле да има номер на реда
- всеки ред без второто поле
- за всеки ред, сумата от второ и трето поле
- сумата на второ и трето поле от всеки ред

Solution:
1) awk 'BEGIN {rowsCount=0} {rowsCount+=1} END {print rowsCount}' emp.data
2) awk 'NR == 3 {print $0}' emp.data
3) awk '{print $NF}' emp.data
4) awk 'END {print $NF}' emp.data OR awk '{print $NF}' emp.data | tail -n 1
5) awk 'NF > 4' emp.data
6) awk '$NF > 4' emp.data
7) awk 'BEGIN {allCols = 0} {allCols += NF} END {print allCols}' emp.data
8) awk 'BEGIN {count = 0} $0 ~ /Beth/ {count += 1} END {print count}' emp.data OR awk '$0 ~ /Beth/' emp.data | wc -l
9) awk '$3 > max {max = $3; row = $0} END {printf "Max value is: %s\nRow is: %s\n", max, row}' emp.data
10) awk 'NF >= 1' emp.data
11) awk 'length($0) > 17' emp.data
12) awk '{print $0, " Number of fields: ", NF}' emp.data
13) awk '{print $2, $1}' emp.data
14) awk '{temp=$2;$2=$1;$1=temp;print $0}' emp.data
15) awk '{$1=NR;print $0}' emp.data
16) awk '{$2="";print $0}' emp.data | tr -s ' '
17) awk '{print "Sum of 2nd and 3rd columns = ", $2 + $3}' emp.data
18) awk 'BEGIN {sum=0} {sum+=$2+$3} END {print sum}' emp.data
--------------------

Task: 03-b-0300.txt
Намерете само Group ID-то си от файлa /etc/passwd.

Solution:
grep $(id -u) /etc/passwd | cut -d ':' -f 4

--------------------

Task: 03-b-3400.txt
Колко коментара има във файла /etc/services ? Коментарите се маркират със символа #, след който всеки символ на реда се счита за коментар.

Solution:
grep -E '#' /etc/services | wc -m

--------------------

Task: 03-b-3500.txt
Колко файлове в /bin са 'shell script'-oве? (Колко файлове в дадена директория са ASCII text?)

Solution:
grep -E -r '#!/bin/bash' /bin | wc -l (???)

--------------------

Task: 03-b-3600.txt
Направете списък с директориите на вашата файлова система, до които нямате достъп. 
Понеже файловата система може да е много голяма, търсете до 3 нива на дълбочина.

Solution:
find / -maxdepth 3 -type d ! -executable 2>/dev/null

--------------------
(TO DO) - 03-b-4*.txt

--------------------

Task: 03-b-5200.txt
Намерете броя на символите, различни от буквата 'а' във файла /etc/passwd

Solution:
grep -E -o '[^a]' /etc/passwd | wc -l

--------------------

Task: 03-b-5300.txt
Намерете броя на уникалните символи, използвани в имената на потребителите от
/etc/passwd.

Solution:
cut -d ':' -f 1 /etc/passwd | fold -w 1 | sort | uniq | wc -l

--------------------

Task: 03-b-5400.txt
Отпечатайте всички редове на файла /etc/passwd, които не съдържат символния низ 'ов'.

Solution:
grep -E -v 'ов' /etc/passwd

--------------------

Task: 03-b-6100.txt
Отпечатайте последната цифра на UID на всички редове между 28-ми и 46-ред в /etc/passwd.

Solution:
1) head -n 46 /etc/passwd | tail -n +28 | cut -d ':' -f 3 | rev | cut -c 1
2) head -n 46 /etc/passwd | tail -n +28 | cut -d ':' -f 3 | grep -E -o '[0-9]$'

--------------------

Task: 03-b-6700.txt
Отпечатайте правата (permissions) и имената на всички файлове, до които имате
read достъп, намиращи се в директорията /tmp. (hint: 'man find', вижте -readable)

Solution:
find /tmp -type f -readable -printf '%M %f\n'

--------------------

Task: 03-b-6900.txt
Намерете имената на 10-те файла във вашата home директория, чието съдържание е
редактирано най-скоро. На първо място трябва да бъде най-скоро редактираният
файл. Намерете 10-те най-скоро достъпени файлове. (hint: Unix time)

Solution:
find ~ -type f -printf '%f %T@\n' | sort -n -r -t ' ' -k 2,2 | head | cut -d ' ' -f 1
find ~ -type f -printf '%f %A@\n' | sort -n -r -t ' ' -k 2,2 | head | cut -d ' ' -f 1

--------------------

Task:  03-b-7000.txt
да приемем, че файловете, които съдържат C код, завършват на `.c` или `.h`.
1) Колко на брой са те в директорията `/usr/include`?
2) Колко реда C код има в тези файлове?

Solution:
1) find /usr/include -type f -name '*.c' -o -name '*.h' | wc -l
2) find /usr/include -type f -name "*.c" -o -name "*.h" -exec wc -l {} \;

--------------------

Task: 03-b-7500.txt
Даден ви е ASCII текстов файл - /etc/services. Отпечатайте хистограма на 10-те най-често срещани думи.
Дума наричаме непразна последователност от букви. Не правим разлика между главни и малки букви.
Хистограма наричаме поредица от редове, всеки от които има вида:
<брой срещания> <какво се среща толкова пъти>

Solution:
cat /etc/services | tr '\t ' '\n' | tr -s '\n' | sort | uniq -c | sort -n -r -t ' ' -k 1,1 | head

--------------------

Task: 03-b-8000.txt
Вземете факултетните номера на студентите (описани във файла
<РЕПО>/exercises/data/mypasswd.txt) от СИ и ги запишете във файл si.txt сортирани.

Студент е част от СИ, ако home директорията на този потребител (според
<РЕПО>/exercises/data/mypasswd.txt) се намира в /home/SI директорията.

Solution:
grep '/home/SI' /srv/fmi-os/exercises/data/mypasswd.txt | cut -d ':' -f 1 | sort -n > ~/si.txt

-------------------

Task: 03-b-8500.txt
За всяка група от /etc/group изпишете "Hello, <група>", като ако това е вашата група, напишете "Hello, <група> - I am here!".

Solution:
cut -d ':' -f 1 /etc/group | awk -v mygroup=$(id -gn) '{if ($0==mygroup) {print "Hello",$0,"- I am here!"} else {print "Hello",$0}}'

-------------------

Task: 03-b-8600.txt
Shell Script-овете са файлове, които по конвенция имат разширение .sh. Всеки
такъв файл започва с "#!<interpreter>" , където <interpreter> указва на
операционната система какъв интерпретатор да пусне (пр: "#!/bin/bash",
"#!/usr/bin/python3 -u").

Намерете всички .sh файлове в директорията `/usr` и нейните поддиректории, и
проверете кой е най-често използваният интерпретатор.

Solution:
find /usr -type f -name '*.sh' -exec head -n 1 {} \; | grep -E '^#!' | cut -d '!' -f 2 | tr -d ' ' | sort | uniq -c | sort -n -r -t ' ' -k 1,1 | head -n 1 | tr -s ' ' | cut -d ' ' -f 3

-------------------

Task:  03-b-8700.txt
1. Изведете GID-овете на 5-те най-големи групи спрямо броя потребители, за които
съответната група е основна (primary).

2. (*) Изведете имената на съответните групи.

Solution:
1) cut -d ':' -f 4 /etc/passwd | sort | uniq -c | sort -n -r | tr -s ' ' | cut -d ' ' -f 3 | head -n 5
2) (TO DO)

-------------------

Task: 03-b-9000.txt
Направете файл eternity. Намерете всички файлове, намиращи се във вашата home
директория и нейните поддиректории, които са били модифицирани в последните
15мин (по възможност изключете .).  Запишете във eternity името (път) на
файла и времето (unix time) на последната промяна.

Solution:
find ~ -type f ! -name 'eternity' -mmin -15 -printf '%p %T@\n' > ~/eternity

-------------------

Task: 03-b-9050.txt
Копирайте файл <РЕПО>/exercises/data/population.csv във вашата home директория.

Solution:
cp /srv/fmi-os/exercises/data/population.csv ~

-------------------

Task: 03-b-9051.txt
Използвайки файл population.csv, намерете колко е общото население на света
през 2008 година. А през 2016?

Solution:
grep -E '^.*,2008,.*$' population.csv | rev | cut -d ',' -f 1 | rev | awk '{sum += $0} END {print sum}'
grep -E '^.*,2016,.*$' population.csv | rev | cut -d ',' -f 1 | rev | awk '{sum += $0} END {print sum}'

-------------------

Task: 03-b-9052.txt
Използвайки файл population.csv, намерете през коя година в България има най-много население.

Solution:
grep -E '^Bulgaria.*$' ~/population.csv | cut -d ',' -f 3,4 | sort -n -r -t ',' -k 2,2 | head -n 1 | cut -d ',' -f1
OR
grep -E '^Bulgaria.*$' population.csv | rev | cut -d ',' -f 1,2 | rev | sort -n -r -t ',' -k 2,2 | head -n 1 | cut -d ',' -f 1
-------------------

Task: 03-b-9053.txt
Използвайки файл population.csv, намерете коя държава има най-много население през 2016. А коя е с най-малко население?
(Hint: Погледнете имената на държавите)

Solution:
grep -E '^.*,2016,.*' population.csv | sed -E 's/("[^,]+),/\1!/g' | sort -t ',' -k 4,4 -n -r | head -n 1 | cut -d ',' -f 1 | sed 's/!/,/g'
grep -E '^.*,2016,.*' population.csv | sed -E 's/("[^,]+),/\1!/g' | sort -t ',' -k 4,4 -n | head -n 1 | cut -d ',' -f 1 | sed 's/!/,/g'

П.П: Може да се подобри с awk заради имена, съдържащи '"'.
-------------------

Task: 03-b-9054.txt
Използвайки файл population.csv, намерете коя държава е на 42-ро място по
население през 1969. Колко е населението й през тази година?

Solution:
grep -E "$(grep -E -o '[^"]*,1969,.*$' ~/population.csv | sort -n -t ',' -k 4,4 | head -n 42 | tail -n 1 | cut -d ',' -f 2),1969.*$" ~/population.csv | cut -d ',' -f 1
grep -E "$(grep -E -o '[^"]*,1969,.*$' ~/population.csv | sort -n -t ',' -k 4,4 | head -n 42 | tail -n 1 | cut -d ',' -f 2),1969.*$" ~/population.csv | cut -d ',' -f 4

-------------------

Task: 03-b-9100.txt
В home директорията си изпълнете командата
curl -o songs.tar.gz "http://fangorn.uni-sofia.bg/misc/songs.tar.gz"

Solution:
DONE

-------------------

Task: 03-b-9101.txt
Да се разархивира архивът songs.tar.gz в директория songs във вашата home директория.

Solution:
TO DO

-------------------

Task: 03-b-9102.txt
Да се изведат само имената на песните.

Solution:
TO DO

--------------------
Task: 03-b-9103.txt
Имената на песните да се направят с малки букви, да се заменят спейсовете с
долни черти и да се сортират.

Solution:
TO DO

-------------------

Task: 03-b-9104.txt
Да се изведат всички албуми, сортирани по година.

Solution:
TO DO

-------------------

Task: 03-b-9105.txt
Да се преброят/изведат само песните на Beatles и Pink.

Solution:
TO DO

-------------------

Task: 03-b-9106.txt
Да се направят директории с имената на уникалните групи. За улеснение, имената
от две думи да се напишат слято:

Beatles, PinkFloyd, Madness

-------------------

Task: 03-b-9200.txt
Напишете серия от команди, които извеждат детайли за файловете и директориите в
текущата директория, които имат същите права за достъп както най-големият файл
в /etc директорията.

Solution:
find . -maxdepth 1 -perm $(find /etc -printf '%m %s\n' 2>/dev/null | sort -n -r -t ' ' -k 2,2 | head -n 1 | cut -d ' ' -f 1)

-------------------

Task: 03-b-9300.txt
Дадени са ви 2 списъка с email адреси - първият има 12 валидни адреса, а
вторията има само невалидни. Филтрирайте всички адреси, така че да останат
само валидните. Колко кратък регулярен израз можете да направите за целта?

Валидни email адреси (12 на брой):
email@example.com
firstname.lastname@example.com
email@subdomain.example.com
email@123.123.123.123
1234567890@example.com
email@example-one.com
_______@example.com
email@example.name
email@example.museum
email@example.co.jp
firstname-lastname@example.com
unusually.long.long.name@example.com

Невалидни email адреси:
#@%^%#$@#$@#.com
@example.com
myemail
Joe Smith <email@example.com>
email.example.com
email@example@example.com
.email@example.com
email.@example.com
email..email@example.com
email@-example.com
email@example..com
Abc..123@example.com
(),:;<>[\]@example.com
just"not"right@example.com
this\ is"really"not\allowed@example.com

Solution:
TO DO

-------------------

Task: 03-b-9400.txt
Посредством awk, използвайки emp.data (от 03-a-6000.txt) за входнни данни,
изведете:

- всеки ред, като полетата са в обратен ред

(Разгледайте for цикли в awk)

Solution:
awk '{for (i = NF; i >= 1; i--) {printf "%s ", $i}; {print ""}}' emp.data

-------------------

Tak: 03-b-9500.txt
Копирайте <РЕПО>/exercises/data/ssa-input.txt във вашата home директория.
Общият вид на файла е:

- заглавна част:
        Smart Array P440ar in Slot 0 (Embedded)

- една или повече секции за масиви:
        Array A
        Array B
        ...
        като буквата (A, B, ...) е името на масива

- във всяка таква секция има една или повече подсекции за дискове:
        physicaldrive 2I:0:5
        physicaldrive 2I:0:6
        ...

        като 2I:0:5 е името на диска

- във всяка подсекция за диск има множество параметри във вида:
        key name: value
        като за нас са интересни само:

                Current Temperature (C): 35
                Maximum Temperature (C): 36

Напишете поредица от команди която обработва файл в този формат, и генерира
следният изход:

A-2I:0:5 35 36
A-2I:0:6 34 35
B-1I:1:1 35 50
B-1I:1:2 35 49

x-yyyyyy zz ww

където:
        - x е името на масива
        - yyyyyy е името на диска
        - zz е current temperature
        - ww е max temperature
