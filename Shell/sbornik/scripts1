
–ó–∞–¥.17 2016-SE-01
–ù–∞–ø–∏—à–µ—Ç–µ shell —Å–∫—Ä–∏–ø—Ç, –∫–æ–π—Ç–æ –ø–æ –ø–æ–¥–∞–¥–µ–Ω –µ–¥–∏–Ω –ø–æ–∑–∏—Ü–∏–æ–Ω–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—ä—Ä,–∞–∫–æ —Ç–æ–∑–∏ –ø–∞—Ä–∞–º–µ—Ç—ä—Ä
 –µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –Ω–∞–º–∏—Ä–∞ –≤—Å–∏—á–∫–∏ symlink-–æ–≤–µ –≤ –Ω–µ—è –∏ –ø–æ–¥-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏—Ç–µ —ù —Å –Ω–µ—Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â destination.

Solution:
#!/bin/bash

if [[ "${#}" -ne 1 ]]; then
    echo "Invalid arguments count!"
    exit 1
fi

if [[ ! -d "${1}" ]]; then
    echo "Not a valid directory!"
    exit 2
fi

find "${1}" -type l ! -exec test -e {} \; -print


--------------------------------------------------------
 –ó–∞–¥. 18 2016-SE-02
–ù–∞–ø–∏—à–µ—Ç–µ shell —Å–∫—Ä–∏–ø—Ç, –∫–æ–π—Ç–æ –ø—Ä–∏–µ–º–∞ –µ–¥–∏–Ω –ø–æ–∑–∏—Ü–∏–æ–Ω–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—ä—Ä-—á–∏—Å–ª–æ. 
–ê–∫–æ —Å–∫—Ä–∏–ø—Ç—ä—Ç —Å–µ –∏–∑–ø—ä–ª–Ω—è–≤–∞ –∫–∞—Ç–æ root, –¥–∞ –∏–∑–≤–µ–∂–¥–∞ –æ–±–æ–±—â–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –æ–±—â–æ—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω–∞ –ø–∞–º–µ—Ç (RSS- resident set size, non-swapped physical memory that a task has used) –Ω–∞ –ø—Ä–æ—Ü–µ—Å–∏—Ç–µ –Ω–∞ –≤—Å–µ–∫–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª.
–ê–∫–æ –∑–∞ –Ω—è–∫–æ–π –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –æ–±–æ–±—â–µ–Ω–æ—Ç–æ —á–∏—Å–ª–æ –Ω–∞–¥–≤–∏—à–∞–≤–∞ –ø–æ–¥–∞–¥–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—ä—Ä,–¥–∞ –∏–∑–ø—Ä–∞—â–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏ —Å–∏–≥–Ω–∞–ª–∏ –∑–∞ –ø—Ä–µ–∫—Ä–∞—Ç—è–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ—Ü–µ—Å–∞ —Å –Ω–∞–π-–º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–∞ –ø–∞–º–µ—Ç –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è.

Solution:
#!/bin/bash

if [[ ${#} -ne 1 ]]; then
    echo "Illegal arguments count!"
    exit 1
fi

if ! echo "${1}" | grep -q -E '^([1-9]+[0-9]*|0)$'; then
    echo "The argument must be a number!"
    exit 2
fi

if [[ ! $(id -u) -ne 0 ]]; then
    echo "The script must be run by root"
    exit 3
fi

upperBoundRSS="${1}"
count=0

function calculateUserRSS {
    while read userRSS; do
        count=$((count + ${userRSS}))
    done < <(ps -u "${1}" -o rss=)
}

function killUsersMostActiveProcess {
    pid=$(ps -u "${1}" -o pid=,rss= | sort -n -r -t ' ' -k 2,2 | head -n 1 | cut -d ' ' -f 2)
    kill "${pid}"
}

while read processLine; do
    uid=$(echo "${processLine}" | cut -d ' ' -f 2)
    count=0
    calculateUserRSS "${uid}"
    echo "${uid}" has "${count}" RSS

    if [[ "${count}" -gt "${upperBoundRSS}" ]]; then
        echo "I AM IN"
        killUsersMostActiveProcess "${uid}"
    fi

done < <(ps -e -o uid= | sort -n | uniq | tr -s ' ')

--------------------------------------------------------
–ó–∞–¥. 19 2016-SE-03 
–ù–∞–ø–∏—à–µ—Ç–µ shell —Å–∫—Ä–∏–ø—Ç –∫–æ–π—Ç–æ, –∞–∫–æ —Å–µ –∏–∑–ø—ä–ª–Ω—è–≤–∞ –æ—Ç root, –ø—Ä–æ–≤–µ—Ä—è–≤–∞ –∫–æ–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ –Ω–∞
 —Å–∏—Å—Ç–µ–º–∞—Ç–∞ –Ω—è–º–∞—Ç homedir –∏–ª–∏ –Ω–µ –º–æ–≥–∞—Ç –¥–∞ –ø–∏—à–∞—Ç –≤ –Ω–µ–≥–æ.

 –ü—Ä–∏–º–µ—Ä–µ–Ω —Ñ–æ—Ä–º–∞—Ç:
 root:x:0:0:root:/root:/bin/bash
 daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
 bin:x:2:2:bin:/bin:/usr/sbin/nologin

Solution:
#!/bin/bash

if [[ $(id -u) -eq 0 ]]; then
    echo "Script must be run as root"
    exit 1
fi

# All users who don't have a home directory
cat /etc/passwd | awk -F ':' '$6 !~ /^\/home\// {print $1}'

# All users who don't W permission in their home directory
for homeDir in $(cat /etc/passwd | awk -F ':' '$6 ~ /^\/home\// {print $6}'); do
    perm=$(stat -c "%a" "${homeDir}" | cut -c 1)

    if [[ "${perm}" -eq 0 || "${perm}" -eq 1 || "${perm}" -eq 4 || "${perm}" -eq 5 ]]; then
        echo "${homeDir}"
        echo $(stat -c "%U" "${homeDir}")
    fi
done

--------------------------------------------------------

–ó–∞–¥. 20 2016-SE-04
–í —Ç–µ–∫—É—â–∞—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–º–∞ —Å–∞–º–æ –æ–±–∏–∫–Ω–æ–≤–µ–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ (–±–µ–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏). –î–∞ —Å–µ –Ω–∞–ø–∏—à–µ bash script, –∫–æ–π—Ç–æ –ø—Ä–∏–µ–º–∞ 2 –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—ä—Ä–∞ ‚Äì —á–∏—Å–ª–∞, –∫–æ–π—Ç–æ –º–µ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤–µ—Ç–µ –æ—Ç —Ç–µ–∫—É—â–∞—Ç–∞ 
–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫—ä–º –Ω–æ–≤–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (a, b –∏ c, –∫–æ–∏—Ç–æ —Ç—Ä—è–±–≤–∞ –¥–∞ –±—ä–¥–∞—Ç —Å—ä–∑–¥–∞–¥–µ–Ω–∏), –∫–∞—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ñ–∞–π–ª —Å–µ –º–µ—Å—Ç–∏:

–∫—ä–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ‚Äôa‚Äô, —Å–∞–º–æ –∞–∫–æ —Ç–æ–π –∏–º–∞ –ø–æ-–º–∞–ª–∫–æ —Ä–µ–¥–æ–≤–µ –æ—Ç –ø—ä—Ä–≤–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—ä—Ä, –º–µ—Å—Ç–∏
–∫—ä–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ‚Äôb‚Äô, –∞–∫–æ —Ä–µ–¥–æ–≤–µ —Å–∞ –º–µ–∂–¥—É –ø—ä—Ä–≤–∏ –∏ –≤—Ç–æ—Ä–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—ä—Ä 
–∏ –≤ ‚Äôc‚Äô –≤ –æ—Å—Ç–∞–Ω–∞–ª–∏—Ç–µ —Å–ª—É—á–∞–∏.

Solution:
#!/bin/bash

if [[ "${#}" -ne 2 ]]; then
    echo "Illegal arguments count"
    exit 1
fi

if ! echo ${1} | grep -q -E '^([1-9]+[0-9]*|0)$'; then
    echo "Argument 1 must be a number!"
    exit 2
fi

if ! echo ${2} | grep -q -E '^([1-9]+[0-9]*|0)$'; then
    echo "Argument 2 must be a number!"
    exit 3
fi

mkdir -p ./{a,b,c}

for file in $(realpath $(find . -type f)); do
    linesCount=$(cat "${file}" | wc -l)
    if [[ "${linesCount}" -lt "${1}" ]]; then
        mv "${file}" ./a
    elif [[ "${linesCount}" -ge "${1}" && "${linesCount}" -le "${2}" ]]; then
        mv "${file}" ./b
    else
        mv "${file}" ./c
    fi
done

--------------------------------------------------------

–ó–∞–¥. 21 2016-SE-05
–§–∞–π–ª–æ–≤–µ—Ç–µ –≤—ä–≤ –≤–∞—à–∞—Ç–∞ home –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—ä–¥—ä—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –º—É–∑–∏–∫–∞–ª–Ω–∏ –∞–ª–±—É–º–∏ –∏ –∏–º–∞—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞. 
–ù–∞—á–∞–ª–æ—Ç–æ –Ω–∞ –≤—Å–µ–∫–∏ —Ä–µ–¥ –µ –≥–æ–¥–∏–Ω–∞—Ç–∞ –Ω–∞ –∏–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –∞–ª–±—É–º–∞, –∞ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–æ, —Å–ª–µ–¥ –Ω–∞—á–∞–ª–æ—Ç–æ –Ω–∞ –≤—Å–µ–∫–∏ —Ä–µ–¥ —Å–ª–µ–¥–≤–∞ –∏–º–µ—Ç–æ –Ω–∞ –∏–∑–ø—ä–ª–∏—Ç–µ–ª—è –Ω–∞ –ø–µ—Å–µ–Ω—Ç–∞. 
–ò–º–µ–Ω–∞—Ç–∞ –Ω–∞ —Ñ–∞–π–ª–æ–≤–µ—Ç–µ —Å–µ —Å—ä—Å—Ç–æ—è—Ç –æ—Ç –µ–¥–Ω–∞ –¥—É–º–∞, –∫–æ—è—Ç–æ —Å—ä–≤–ø–∞–¥–∞ —Å –∏–º–µ—Ç–æ –Ω–∞ –∏–∑–ø—ä–ª–Ω–∏—Ç–µ–ª—è.

–î–∞ —Å–µ –Ω–∞–ø–∏—à–µ shell —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏–µ–º–∞—â –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—ä—Ä–∞, –∫–æ–∏—Ç–æ —Å–∞ –∏–º–µ–Ω–∞ –Ω–∞ —Ñ–∞–π–ª–æ–≤–µ –æ—Ç –≤–∞—à–∞—Ç–∞ home –¥–∏
—Ä–µ–∫—Ç–æ—Ä–∏—è. –°–∫—Ä–∏–ø—Ç—ä—Ç —Å—Ä–∞–≤–Ω—è–≤–∞, –∫–æ–π –æ—Ç –¥–≤–∞—Ç–∞ —Ñ–∞–π–ª–∞ –∏–º–∞ –ø–æ–≤–µ—á–µ –Ω–∞ –±—Ä–æ–π —Ä–µ–¥–æ–≤–µ, —Å—ä–¥—ä—Ä–∂–∞—â–∏ –Ω–µ–≥–æ–≤–æ—Ç–æ
 –∏–º–µ(–Ω–∞ —Ñ–∞–π–ª–∞). –ó–∞ —Ñ–∞–π–ª—ä—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª –∏–∑–ø—ä–ª–Ω–µ—Ç–µ —Å–ª–µ–¥–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è:
 ‚Ä¢ –∏–∑–≤–ª–µ—á–µ—Ç–µ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ –º—É, –±–µ–∑ –≥–æ–¥–∏–Ω–∞—Ç–∞ –Ω–∞ –∏–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –∞–ª–±—É–º–∞ –∏ –±–µ–∑ –∏–º–µ—Ç–æ –Ω–∞ –∏–∑–ø—ä–ª–Ω–∏—Ç–µ–ª—è
 ‚Ä¢ —Å–æ—Ä—Ç–∏—Ä–∞–π—Ç–µ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–æ—Ç–æ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ –∏ –≥–æ –∑–∞–ø–∏—à–µ—Ç–µ –≤—ä–≤ —Ñ–∞–π–ª —Å –∏–º–µ ‚Äô–∏–∑–ø—ä–ª–Ω–∏—Ç–µ–ª.songs‚Äô

Solution:
#!/bin/bash

if [[ "${#}" -ne 2 ]]; then
    echo "Illegal arguments count"
    exit 1
fi

if [[ ! -f "${1}" ]]; then
    echo "String 1 does not represent the name of a file!"
    exit 2
fi

if [[ ! -f "${2}" ]]; then
    echo "String 2 does not represent the name of a file!"
    exit 3
fi

rowsCount1=$(cat "${1}" | grep -E '^.*${1}' | wc -l)
rowsCount2=$(cat "${2}" | grep -E '^.*${2}' | wc -l)

resultname=""

if [[ "${rowsCount1}" -gt "${rowsCount2}" ]]; then
    resultname="${1}"
else
    resultname="${2}"
fi

grep -E -o '\".*' "${resultname}" | sort > "${resultname}".songs

--------------------------------------------------------
–ó–∞–¥. 22 2016-SE-06:
–ò–º–∞—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤ —Ñ–∞–π–ª —Å—ä—Å —Å–ª–µ–¥–Ω–æ—Ç–æ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ (–≤—Å—è–∫–∞ –∫–Ω–∏–≥–∞ –µ –Ω–∞ –µ–¥–∏–Ω —Ä–µ–¥)
–ù–∞–ø–∏—à–µ—Ç–µ shell script (–ø—Ä–∏–µ–º–∞—â –∞—Ä–≥—É–º–µ–Ω—Ç –∏–º–µ –Ω–∞ —Ñ–∞–π–ª) –∫–æ–π—Ç–æ –∏–∑–≤–µ–∂–¥–∞:
 ‚Ä¢ –≤—Å–µ–∫–∏ —Ä–µ–¥ –æ—Ç—Ñ–∞–π–ª–∞—Å–¥–æ–±–∞–≤–µ–Ω –ø–æ—Ä–µ–¥–µ–Ω –Ω–æ–º–µ—Ä –≤—ä–≤ —Ñ–æ—Ä–º–∞—Ç"1. ","2. "
 ‚Ä¢ –º–∞—Ö–∞—Ç –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ –≥–æ–¥–∏–Ω–∞—Ç–∞ –Ω–∞ –∏–∑–¥–∞–≤–∞–Ω–µ
 ‚Ä¢ —Å–æ—Ä—Ç–∏—Ä–∞—Ç –∏–∑—Ö–æ–¥–∞ –ø–æ –∑–∞–≥–ª–∞–≤–∏–µ (–ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ—Å–∫–∏, –≤—ä–∑—Ö–æ–¥—è—â–æ)

Solution:
#!/bin/bash

if [[ ${#} -ne 1 ]]; then
    echo "Illegal arguments count"
    exit 1
fi

if [[ ! -f ${1} ]]; then
    echo "The argument must be a file"
    exit 2
fi

filename="${1}"
temp_file=$(mktemp)

cat "${filename}" | grep -E -o '".*' | awk '{print NR ".", $0}' >> "${temp_file}"
sort -t '"' -k 2,2 "${temp_file}"

rm -f "${temp_file}"
--------------------------------------------------------
 –ó–∞–¥. 23 2017-IN-01
–ù–∞–ø–∏—à–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç, –∫–æ–π—Ç–æ –ø—Ä–∏–µ–º–∞ —Ç—Ä–∏ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏ –ø–æ–∑–∏—Ü–æ–Ω–Ω–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞:
 ‚Ä¢ –∏–º–µ –Ω–∞ —Ñ–∞–∏–ª
 ‚Ä¢ –Ω–∏–∑1
 ‚Ä¢ –Ω–∏–∑2
 –§–∞–π–ª—ä—Ç –µ —Ç–µ–∫—Å—Ç–æ–≤–∏, –∏ —Å—ä–¥—ä—Ä–∂–∞ —Ä–µ–¥–æ–≤–µ –≤—ä–≤ —Ñ–æ—Ä–º–∞—Ç:
 –∫–ª—é—á=—Å—Ç–æ–π–Ω–æ—Å—Ç
 –∫—ä–¥–µ—Ç–æ —Å—Ç–æ–π–Ω–æ—Å—Ç –º–æ–∂–µ –¥–∞ –±—ä–¥–µ:
 ‚Ä¢ –ø—Ä–∞–∑–µ–Ω –Ω–∏–∑, —Ç.–µ. —Ä–µ–¥—ä—Ç –µ –∫–ª—é—á=
 ‚Ä¢ –Ω–∏–∑, —Å—ä—Å—Ç–æ—è—â —Å–µ –æ—Ç –µ–¥–∏–Ω –∏–ª–∏–ø–æ–≤–µ—á–µ —Ç–µ—Ä–º–æ–≤–µ, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∏, —Ç.–µ., —Ä–µ–¥—ä—Ç –µ –∫–ª—é—á=ùë°1 ùë°2 ùë°3
 –ù—è–∫—ä–¥–µ –≤—ä–≤ —Ñ–∞–π–ª–∞:
 ‚Ä¢ —Å–µ —Å—ä–¥—ä—Ä–∂–∞ –µ–¥–∏–Ω —Ä–µ–¥ —Å –∫–ª—é—á –ø—ä—Ä–≤–∏—è –ø–æ–¥–∞–¥–µ–Ω –Ω–∏–∑(–Ω–∏–∑1);
 ‚Ä¢ –∏ –º–æ–∂–µ –¥–∞ —Å–µ —Å—ä–¥—ä—Ä–∂–∞ –µ–¥–∏–Ω —Ä–µ–¥ —Å –∫–ª—é—á –≤—Ç–æ—Ä–∏—è –ø–æ–¥–∞–¥–µ–Ω –Ω–∏–∑(–Ω–∏–∑2).
 –°–∫—Ä–∏–ø—Ç—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –ø—Ä–æ–º–µ–Ω—è —Ä–µ–¥–∞ —Å –∫–ª—é—á –Ω–∏–∑2 —Ç–∞–∫–∞, —á–µ –æ–±–µ–¥–∏–Ω–µ–Ω–∏–µ—Ç–æ –Ω–∞ —Ç–µ—Ä–º–æ–≤–µ—Ç–µ –Ω–∞ —Ä–µ–¥–æ–≤–µ—Ç–µ —Å –∫–ª—é—á–æ–≤–µ –Ω–∏–∑1 –∏ –Ω–∏–∑2 –¥–∞ –≤–∫–ª—é—á–≤–∞ –≤—Å–µ–∫–∏ —Ç–µ—Ä–º –µ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ.

Solution:
#!/bin/bash

if [[ ${#} -ne 3 ]]; then
    echo "Illegal arguments count"
    exit 1
fi

if [[ ! -f "${1}" ]]; then
    echo "Argument 1 must be a file"
    exit 2
fi

if [[ -z "${2}" ]]; then
    echo "Argument 2 must a non-empty string"
    exit 3
fi

if [[ -z "${3}" ]]; then
    echo "Argument 3 must a non-empty string"
    exit 4
fi

stringOne="${2}"
stringTwo="${3}"

if ! grep -q "${stringTwo}=" "${1}"; then
    exit 0
fi

tempFileA=$(mktemp)
tempFileB=$(mktemp)

argumentsA=$(grep -E "${stringOne}=" "${1}" | cut -d '=' -f 2)
argumentsB=$(grep -E "${stringTwo}=" "${1}" | cut -d '=' -f 2)

echo ${argumentsA} | tr ' ' '\n' | sort >> ${tempFileA}
echo ${argumentsB} | tr ' ' '\n' | sort >> ${tempFileB}

uniqueArgumentsB=$(comm -1 -3 ${tempFileA} ${tempFileB} | tr '\n' ' ')

sed -E -i "s/${stringTwo}=${argumentsB}/${stringTwo}=${uniqueArgumentsB}/g" "${1}"

rm -f "${tempFileA}"
rm -f "${tempFileB}"

--------------------------------------------------------
–ó–∞–¥.24 2017-IN-02 
–ù–∞–ø–∏—à–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç,–∫–æ–π—Ç–æ –ø—Ä–∏–µ–º–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–µ–Ω –ø–æ–∑–∏—Ü–∏–æ–Ω–µ–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - –∏–º–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª FOO.
–ê–∫–æ —Å–∫—Ä–∏–ø—Ç—ä—Ç —Å–µ –∏–∑–ø—ä–ª–Ω—è–≤–∞ –æ—Ç root:
 –∞) –¥–∞ –∏–∑–≤–µ–∂–¥–∞ –∏–º–µ–Ω–∞—Ç–∞ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ, –∫–æ–∏—Ç–æ –∏–º–∞—Ç –ø–æ–≤–µ—á–µ –Ω–∞ –±—Ä–æ–π –ø—Ä–æ—Ü–µ—Å–∏ –æ—Ç FOO, –∞–∫–æ –∏–º–∞ —Ç–∞
–∫–∏–≤–∞;
 –±) –¥–∞ –∏–∑–≤–µ–∂–¥–∞ —Å—Ä–µ–¥–Ω–æ—Ç–æ –≤—Ä–µ–º–µ (–≤ —Å–µ–∫—É–Ω–¥–∏), –∑–∞ –∫–æ–µ—Ç–æ —Å–∞ —Ä–∞–±–æ—Ç–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å–∏—Ç–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ –Ω–∞ —Å–∏—Å—Ç–µ–º–∞—Ç–∞ (TIME, –≤—ä–≤ —Ñ–æ—Ä–º–∞—Ç HH:MM:SS);
 –≤) –∞–∫–æ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—Ç –ø—Ä–æ—Ü–µ—Å–∏ –Ω–∞ FOO, –∫–æ–∏—Ç–æ —Å–∞ —Ä–∞–±–æ—Ç–∏–ª–∏ –Ω–∞–¥ –¥–≤–∞ –ø—ä—Ç–∏ –ø–æ–≤–µ—á–µ –æ—Ç —Å—Ä–µ–¥–Ω–æ—Ç–æ –≤—Ä–µ–º–µ, —Å–∫—Ä–∏–ø—Ç—ä—Ç –¥–∞ –ø—Ä–µ–∫—Ä–∞—Ç—è–≤–∞ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ—Ç–æ –∏–º –ø–æ –ø–æ–¥—Ö–æ–¥—è—â –Ω–∞—á–∏–Ω.

Solution:
#!/bin/bash

if [[ ${#} -ne 1 ]]; then
    echo "Invalid arguments count"
    exit 1
fi

if [[ ! $(id -u) -ne 0 ]]; then
    echo "Script must be run as root"
    exit 2
fi

#Subtask 1

allUsers=$(ps -e -o user=,pid=,time=)

userCountTable=$(echo "${allUsers}" | awk '{print $1}' | sort | uniq -c)

userCount=$(echo "${userCountTable}" | awk -v user="${1}" '$2==user {print $1}')

while read line; do
    currentCount=$(echo ${line} | cut -d ' ' -f 1)
    currentUser=$(echo ${line} | cut -d ' ' -f 2)

    if [[ ${currentCount} -gt ${userCount} ]]; then
        echo "${currentUser}"
    fi
done < <(echo "${userCountTable}")




#Subtask 2
sumTime=$(echo "${allUsers}" | awk '{print $3}' | awk -F ':' 'BEGIN {sum=0} {sum+=$1*3600+$2*60+$3} END {print sum}')
count=$(echo "${allUsers}" | wc -l)

averageTime=$(echo "${sumTime} ${count}" | awk '{print $1/$2}')
echo "Average time: " ${averageTime}



#Subtask 3
limit=$(echo "${averageTime}" | awk '{print $1*2}')

tempFile=$(mktemp)
while read line; do
    echo ${line} | awk -v user="${1}" '$1==user {print $2 ":" $3}' >> "${tempFile}"
done < <(echo "${allUsers}")

pidsFile=$(mktemp)
while read line; do
    echo ${line} | awk -F ':' -v avgLimit="${limit}" '$2*3600+$3*60+$4>avgLimit {print $1}' >> "${pidsFile}"
done < <(cat "${tempFile}")


while read line; do
    kill ${line}
done < <(cat "${pidsFile}")

rm -f ${tempFile}
rm -f ${pidsFile}
--------------------------------------------------------
–ó–∞–¥. 25 2017-IN-03:
–ù–∞–ø–∏—à–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç, –∫–æ–π—Ç–æ –∏–∑–≤–µ–∂–¥–∞ –∏–º–µ—Ç–æ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∏—è –∞–∫–∞—É–Ω—Ç, –≤ —á–∏—è—Ç–æ home –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–º–∞ –Ω–∞–π-—Å–∫–æ—Ä–æ –ø—Ä–æ–º–µ–Ω–µ–Ω –æ–±–∏–∫–Ω–æ–≤–µ–Ω —Ñ–∞–π–ª –∏ –∫–æ–π –µ —Ç–æ–∑–∏ —Ñ–∞–π–ª.
–ù–∞–ø–∏—à–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç–∞ —Å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, —Ç–∞–∫–∞ —á–µ –¥–∞ –±—ä–¥–µ –≤–∞–ª–∏–¥–µ–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.

Solution:
#!/bin/bash

line=$(find /home -type f -printf '%T@ %u %p\n' 2>/dev/null | sort -nr | head -n 1)

echo ${line} | cut -d ' ' -f 2
echo ${line} | cut -d ' ' -f 3,3
--------------------------------------------------------
–ó–∞–¥. 26 2017-SE-01:
–ù–∞–ø–∏—à–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç, –∫–æ–π—Ç–æ –ø–æ–ª—É—á–∞–≤–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–µ–Ω –ø—ä—Ä–≤–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—ä—Ä‚Äì –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏ –Ω–µ–∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–µ–Ω –≤—Ç–æ—Ä–∏‚Äì—á–∏—Å–ª–æ.
–°–∫—Ä–∏–ø—Ç—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –ø—Ä–æ–≤–µ—Ä—è–≤–∞ –ø–æ–¥–∞–¥–µ–Ω–∞—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏ –Ω–µ–π–Ω–∏—Ç–µ –ø–æ–¥-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –¥–∞ –∏–∑–≤–µ–∂–¥–∞ –∏–º–µ–Ω–∞—Ç–∞ –Ω–∞:
 –∞) –ø—Ä–∏ –ø–æ–¥–∞–¥–µ–Ω –Ω–∞ —Å–∫—Ä–∏–ø—Ç–∞ –≤—Ç–æ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—ä—Ä‚Äì –≤—Å–∏—á–∫–∏ —Ñ–∞–π–ª–æ–≤–µ —Å –±—Ä–æ–π hardlink-–æ–≤–µ –ø–æ–Ω–µ —Ä–∞–≤–µ–Ω –Ω–∞
 –ø–∞—Ä–∞–º–µ—Ç—ä—Ä–∞;
 –±) –ø—Ä–∏ –ª–∏–ø—Å–∞ –Ω–∞ –≤—Ç–æ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—ä—Ä ‚Äì –≤—Å–∏—á–∫–∏ symlink-–æ–≤–µ —Å –Ω–µ—Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â destination (—Å—á—É–ø–µ–Ω–∏ symlink–æ–≤–µ).

Solution:
#/bin/bash

if [[ ${#} -ne 1 && ${#} -ne 2 ]]; then
    echo "Illegal arguments count"
    exit 1
fi

if [[ ! -d ${1} ]];  then
    echo "Argument 1 must be a directory"
    exit 2
fi

if [[ ${#} -eq 1 ]]; then
    find "${1}" -type l ! -exec test -e {} \; -print 2>/dev/null
else
    if [[ ! $2 =~ ^([1-9]+[0-9]*|0)$ ]]; then
        echo "Argument 2 must be a number"
        exit 3
    fi

    #find "${1}" -type f -printf "%n %p\n"
    hardlinksCount=$(($2-1))

    find "${1}" -type f -links +${hardlinksCount} -printf "%p\n"
fi
--------------------------------------------------------

–ó–∞–¥. 27 2017-SE-02:
–ù–∞–ø–∏—à–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç,–∫–æ–π—Ç–æ –ø—Ä–∏–µ–º–∞ —Ç—Ä–∏ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—ä—Ä–∞ - –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è SRC, –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è DST (–∫–æ—è—Ç–æ –Ω–µ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å—ä–¥—ä—Ä–∂–∞ —Ñ–∞–π–ª–æ–≤–µ) –∏ –Ω–∏–∑ –êBC.
–ê–∫–æ —Å–∫—Ä–∏–ø—Ç—ä—Ç —Å–µ –∏–∑–ø—ä–ª–Ω—è–≤–∞ –æ—Ç root –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è, —Ç–æ —Ç–æ–π —Ç—Ä—è–±–≤–∞ –¥–∞ –Ω–∞–º–∏—Ä–∞ –≤—Å–∏—á–∫–∏ —Ñ–∞–π–ª–æ–≤–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ SRC –∏ –Ω–µ–π–Ω–∏—Ç–µ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, 
–∫–æ–∏—Ç–æ –∏–º–∞—Ç –≤ –∏–º–µ—Ç–æ —Å–∏ –∫–∞—Ç–æ –ø–æ–¥-–Ω–∏–∑ –êBC, –∏ –¥–∞ –≥–∏ –º–µ—Å—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ DST, –∑–∞–ø–∞–∑–≤–∞–π–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π–Ω–∞—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–Ω–æ –±–µ–∑ –¥–∞ –∑–∞–ø–∞–∑–≤–∞ –º–µ—Ç–∞-–¥–∞–Ω–Ω–∏ –∫–∞—Ç–æ —Å–æ–±—Å—Ç–≤–µ–Ω–∏–∫ –∏ –ø—Ä–∞–≤–∞, —Ç.–µ. 
–Ω–µ –Ω–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É–≤–∞—Ç —Ç–µ–∑–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–∞ –Ω–æ–≤–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∫–æ–∏—Ç–æ —Å–∫—Ä–∏–ø—Ç—ä—Ç –±–∏ –≥–µ–Ω–µ—Ä–∏—Ä–∞–ª –≤ DST).

Solution:
#!/bin/bash

if [[ $# -ne 3 ]]; then
    echo "Illegal arguments count"
    exit 1
fi

if [[ ! -d "${1}" ]]; then
    echo "Argument 1 must be a directory"
    exit 2
fi

if [[ ! -d "${2}" ]]; then
    echo "Argument 2 must be a directory"
    exit 3
fi

if [[ -n $(find "${2}" -mindepth 1 -print -quit) ]]; then
    echo "Directory 2 must be empty"
    exit 4
fi

if [[ $(id -u) -ne 0 ]]; then
    echo "Script must be run as root"
    exit 5
fi

srcFiles=$(find "${1}" -type f -name "*${3}*")
for fileName in ${srcFiles}; do
    newDir=$(dirname "${fileName}" | sed "s:${1}:${2}:g")
    mkdir -p ${newDir}
    cp ${fileName} ${newDir}
    rm ${fileName}
done

--------------------------------------------------------

 –ó–∞–¥. 28 2017-SE-03:
–ù–∞–ø–∏—à–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç, –∫–æ–π—Ç–æ –∞–∫–æ —Å–µ –∏–∑–ø—ä–ª–Ω—è–≤–∞ –æ—Ç root –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è:
 –∞) –∏–∑–≤–µ–∂–¥–∞ –æ–±–æ–±—â–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –±—Ä–æ—è –∏ –æ–±—â–æ—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω–∞ –ø–∞–º–µ—Ç (RSS- resident set
 size, non-swaped physical memory that a task has used) –Ω–∞ —Ç–µ–∫—É—â–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å–∏ –Ω–∞ –≤—Å–µ–∫–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª;
 –±) –∞–∫–æ –ø—Ä–æ—Ü–µ—Å—ä—Ç —Å –Ω–∞–π-–≥–æ–ª—è–º–∞ –∞–∫—Ç–∏–≤–Ω–∞ –ø–∞–º–µ—Ç –Ω–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –∏–∑–ø–æ–ª–∑–≤–∞ –¥–≤–∞ –ø—ä—Ç–∏ –ø–æ–≤–µ—á–µ –ø–∞–º–µ—Ç
 –æ—Ç —Å—Ä–µ–¥–Ω–æ—Ç–æ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è, —Ç–æ —Å–∫—Ä–∏–ø—Ç—ä—Ç –¥–∞ –ø—Ä–µ–∫—Ä–∞—Ç—è–≤–∞ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ—Ç–æ –º—É –ø–æ –ø–æ–¥—Ö–æ–¥—è—â –Ω–∞—á–∏–Ω.

Solution:
#!/bin/bash

if [[ $(id -u) -ne 0 ]]; then
    echo "Script must be run as root"
    exit 1
fi

allUsersInfo=$(ps -e -o uid=,rss=,pid= | sort -t ' ' -k 1,1 -n)
processesCount=$(echo "${allUsersInfo}" | awk '{print $1}' | uniq -c)

while read count user; do
    line=$(echo "${allUsersInfo}" | awk -v currUser=${user} '
    BEGIN {
        sum=0
        biggestRSS=-1
        pid=-1
    }
    {
        if ($1==currUser) {
            sum+=$2
            if ($2 > biggestRSS) {
                biggestRSS=$2
                pid=$3
            }
        }
    }  END {print sum, biggestRSS, pid}')

    rssSum=$(echo "${line}" | cut -d ' ' -f 1)
    biggestRSS=$(echo "${line}" | cut -d ' ' -f 2)
    pid=$(echo "${line}" | cut -d ' ' -f 3)

    echo "${user}'s count = " ${count} "and rss sum =" ${rssSum}
    averageRSS=$(echo "${rssSum} / ${count}" | bc -l)

    isGreater=$(echo "${biggestRSS} > 2 * ${averageRSS}" | bc -l)
    if [[ "${isGreater}" -eq 1 ]]; then
        kill "${pid}" 2>/dev/null
    fi
done < <(echo "${processesCount}")

--------------------------------------------------------

 –ó–∞–¥. 29 2017-SE-04:
–ù–∞–ø–∏—à–µ—Ç–µ shell script, –∫–æ–π—Ç–æ –ø–æ–ª—É—á–∞–≤–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–µ–Ω –ø—ä—Ä–≤–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—ä—Ä‚Äì –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏ –Ω–µ–∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–µ–Ω –≤—Ç–æ—Ä–∏‚Äì –∏–º–µ –Ω–∞ —Ñ–∞–π–ª.
–°–∫—Ä–∏–ø—Ç—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –Ω–∞–º–∏—Ä–∞ –≤ –ø–æ–¥–∞–¥–µ–Ω–∞—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏ –Ω–µ–π–Ω–∏—Ç–µ –ø–æ–¥-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤—Å–∏—á–∫–∏ symlink-–æ–≤–µ –∏ –¥–∞ –∏–∑–≤–µ–∂–¥–∞ (–ø—Ä–∏ –ø–æ–¥–∞–¥–µ–Ω –∞—Ä–≥—É–º–µ–Ω—Ç —Ñ–∞–π–ª -
–¥–æ–±–∞–≤—è–π–∫–∏ –∫—ä–º —Ñ–∞–π–ª–∞, –∞ –∞–∫–æ –Ω–µ –µ ‚Äì –Ω–∞—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—è –∏–∑—Ö–æ–¥) –∑–∞ —Ç—è—Ö —Å–ª–µ–¥–Ω–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
 ‚Ä¢ –∞–∫–æ destination-—ä—Ç —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ ‚Äì –∏–º–µ—Ç–æ –Ω–∞ symlink-–∞ -> –∏–º–µ—Ç–æ –Ω–∞ destination-–∞;
 ‚Ä¢ –±—Ä–æ—è –Ω–∞ symlink-–æ–≤–µ—Ç–µ, —á–∏–π—Ç–æ destination –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞.

Solution:
#!/bin/bash

if [[ ${#} -ne 1 && ${#} -ne 2 ]]; then
    echo "Illegal arguments count"
    exit 1
fi

if [[ ! -d "${1}" ]]; then
    echo "Argument 1 must be a directory"
    exit 2
fi

if [[ ${#} -eq 2 ]]; then
    exec > "${2}"
fi

count=0
while IFS= read -r -d '' symlink; do
    if [[ ! -e $(readlink "${symlink}") ]]; then
        count=$((count+1))
    else
        echo $(basename "${symlink}") "->" $(basename $(readlink "${symlink}"))
    fi
done < <(find "${1}" -type l -print0 2>/dev/null)

echo "Broken symlinks:" ${count}

--------------------------------------------------------

–ó–∞–¥. 30 2017-SE-05:
 –ü—Ä–∏–º–µ—Ä:
 ‚Ä¢ –°—ä–¥—ä—Ä–∂–∞–Ω–∏–µ –Ω–∞./kern/
 vmlinuz-3.4.113-amd64
 vmlinuz-4.11.12-amd64
 vmlinuz-4.12.4-amd64
 vmlinuz-4.19.1-i386
 ‚Ä¢ –ò–∑–≤–∏–∫–≤–∞–Ω–µ –∏ –∏–∑—Ö–æ–¥:
$ ./task1.sh ./kern/ amd64
 vmlinuz-4.12.4-amd64

Solution:
#!/bin/bash

if [[ ${#} -ne 2 ]]; then
    echo "Illegal arguments count"
    exit 1
fi

if [[ ! -d ${1} ]]; then
    echo "Argument 1 must be a directory"
    exit 2
fi

tempFile=$(mktemp)

find "${1}" -type f -printf "%f\n" 1>${tempFile} 2>/dev/null

fileName=$(cat "${tempFile}" | grep -E "^vmlinuz-([1-9]+[0-9]*|0).([1-9]+[0-9]*|0).([1-9]+[0-9]*|0)-${2}" | sort -V | tail -n 1)
echo "${fileName}"

rm -f "${tempFile}"

--------------------------------------------------------
–ó–∞–¥. 31 2017-SE-06:
–ù–∞–ø–∏—à–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç, –∫–æ–π—Ç–æ –∞–∫–æ —Å–µ –∏–∑–ø—ä–ª–Ω—è–≤–∞ –æ—Ç root –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è, –Ω–∞–º–∏—Ä–∞ –ø—Ä–æ—Ü–µ—Å–∏—Ç–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ, –∫–æ–∏—Ç–æ –Ω–µ —Å–∞ root –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –∏ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω–æ –ø–æ–Ω–µ –µ–¥–Ω–æ –æ—Ç —Å–ª–µ–¥–Ω–∏—Ç–µ –Ω–µ—â–∞:
 ‚Ä¢ –∏–º–∞—Ç –∑–∞–¥–∞–¥–µ–Ω–∞ –Ω–µ—Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∞ home –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è;
 ‚Ä¢ –Ω–µ —Å–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–∏—Ü–∏ –Ω–∞ home –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ —Å–∏;
 ‚Ä¢ —Å–æ–±—Å—Ç–≤–µ–Ω–∏–∫–∞ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ –Ω–µ –º–æ–∂–µ –¥–∞ –ø–∏—à–µ –≤ –Ω–µ—è.

 –ê–∫–æ –æ–±—â–æ—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω–∞ –ø–∞–º–µ—Ç (RSS-residentset size, non-swaped physical memory that a task has used) –Ω–∞ –ø—Ä–æ—Ü–µ—Å–∏—Ç–µ –Ω–∞ –¥–∞–¥–µ–Ω —Ç–∞–∫—ä–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª 
–µ –ø–æ-–≥–æ–ª—è–º–æ –æ—Ç –æ–±—â–æ—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω–∞ –ø–∞–º–µ—Ç –Ω–∞ root –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è, —Ç–æ —Å–∫—Ä–∏–ø—Ç—ä—Ç –¥–∞ –ø—Ä–µ–∫—Ä–∞—Ç—è–≤–∞ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ—Ç–æ –Ω–∞ –≤—Å–∏—á–∫–∏ –ø—Ä–æ—Ü–µ—Å–∏ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è.

Solution:
#!/bin/bash

if [[ ! $(id -u) -ne 0 ]]; then
    echo "Script must be run as root"
    exit 1
fi

processes=$(ps -e -o uid,rss,pid)
directories=$(cat /etc/passwd | awk -F ':' '{print $6}')

#Condition 1

fileName1=$(mktemp)

while read userID homeDir; do
    if [[ ${userID} -eq 0 ]]; then
        continue
    else
        if [[ ! -e "${homeDir}" ]]; then
            echo "${userID}" >> "${fileName1}"
        elif [[ $(stat -c "%u" "${homeDir}") -ne "${userID}" ]]; then
            echo "${userID}" >> "${fileName1}"
        elif [[ $(stat -c "%A" "${homeDir}" | cut -c 3) != "w" ]]; then
            echo "${userID}" >> "${fileName1}"
        fi
    fi

done < <(cat /etc/passwd | awk -F ':' '{print $3, $6}')

processes=$(mktemp)
ps -e -o uid=,pid=,rss= > "${processes}"

information=$(awk '{sum[$1] += $3} END {for (uid in sum) print uid, sum[uid]}' "${processes}")
rootRSS=$(echo "${information}" | awk '$1==0 {print $2}')

function killAllProcesses {
    while IFS=' ' read uid pid rss; do
        if [[ ${uid} -eq ${1} ]]; then
            kill ${pid}
        fi
    done < "${processes}"
}

while IFS=' ' read -r userID rssSum; do
    if grep -q "^${userID}$" "${fileName1}"; then
        echo ${userID} ${rssSum}
        if [[ ${rssSum} -gt ${rootRSS} ]]; then
           killAllProcesses ${userID}
        fi
    fi
done < <(echo "${information}")

rm -f "${fileName1}"
rm -f "${processes}"

--------------------------------------------------------
–ù–µ–∫–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –ø—Ä–æ–≥—Ä–∞–º–∞ –∑–∞ –º–æ–º–µ–Ω—Ç–Ω–∞ –∫–æ–º—É–Ω–∏–∫–∞—Ü–∏—è (Instant messaging), –∫–æ—è—Ç–æ –∑–∞–ø–∏—Å–≤–∞
 –ª–æ–≥–æ–≤–µ –Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∏—Ç–µ –≤ —Å–ª–µ–¥–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç:
 ‚Ä¢ –∏–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∑–∞ –ª–æ–≥–æ–≤–µ (LOGDIR)
 ‚Ä¢ –≤ –Ω–µ—è –∏–º–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç —Å–ª–µ–¥–Ω–∏—è –≤–∏–¥:
 LOGDIR/–ø—Ä–æ—Ç–æ–∫–æ–ª/–∞–∫–∞—É–Ω—Ç/–ø—Ä–∏—è—Ç–µ–ª/
 –∫–∞—Ç–æ –Ω–∞ –≤—Å—è–∫–æ –Ω–∏–≤–æ –º–æ–∂–µ –¥–∞ –∏–º–∞ –Ω—è–∫–æ–ª–∫–æ –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ –æ—Ç —Å—ä–æ—Ç–≤–µ—Ç–Ω–∏—è –≤–∏–¥, —Ç.–µ. –Ω—è–∫–æ–ª–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
 –ø—Ä–æ—Ç–æ–∫–æ–ª, –≤—ä–≤ –≤—Å—è–∫–∞ –æ—Ç —Ç—è—Ö –º–æ–∂–µ –¥–∞ –∏–º–∞ –Ω—è–∫–æ–ª–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∞–∫–∞—É–Ω—Ç, –∏ –≤—ä–≤ –≤—Å—è–∫–∞ –æ—Ç —Ç—è—Ö ‚Äì –Ω—è–∫–æ–ª–∫–æ
 –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏—è—Ç–µ–ª
 ‚Ä¢ –≤—ä–≤ –≤—Å—è–∫–∞ –æ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏—Ç–µ –ø—Ä–∏—è—Ç–µ–ª –º–æ–∂–µ –¥–∞ –∏–º–∞ —Ñ–∞–π–ª–æ–≤–µ —Å –∏–º–µ–Ω–∞ –æ—Ç –≤–∏–¥–∞ yyyy-mm-dd-hh-mm-‚Äì –≥–æ–¥–∏–Ω–∞-–º–µ—Å–µ—Ü-–¥–µ–Ω –∏ —Ç.–Ω., —Å–ø—Ä—è–º–æ —Ç–æ–≤–∞ –∫–æ–≥–∞ –µ –∑–∞–ø–æ—á–Ω–∞–ª –¥–∞–¥–µ–Ω —Ä–∞–∑–≥–æ–≤–æ—Ä
 ‚Ä¢ –≤—Å–µ–∫–∏ —Ç–∞–∫—ä–≤ —Ñ–∞–π–ª –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–≤–∞ –ª–æ–≥ –Ω–∞ –¥–∞–¥–µ–Ω —Ä–∞–∑–≥–æ–≤–æ—Ä —Å—ä—Å —Å—ä–æ—Ç–≤–µ—Ç–Ω–∏—è –ø—Ä–∏—è—Ç–µ–ª, –∫–∞—Ç–æ –≤—Å—è–∫–∞ —Ä–∞–∑
–º–µ–Ω–µ–Ω–∞ —Ä–µ–ø–ª–∏–∫–∞ –º–µ–∂–¥—É –≤–∞—Å –µ –Ω–∞–æ—Ç–¥–µ–ª–µ–Ω —Ä–µ–¥
 ‚Ä¢ –¥–∞–¥–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏—è—Ç–µ–ª –º–æ–∂–µ –¥–∞ —Å–µ —Å—Ä–µ—â–∞ –Ω—è–∫–æ–ª–∫–æ –ø—ä—Ç–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ç–∞ (–Ω–∞–ø—Ä. –ø—Ä–µ–∑ —Ä–∞–∑
–ª–∏—á–Ω–∏ –≤–∞—à–∏–∞–∫–∞—É–Ω—Ç–∏ —Å—Ç–µ –≤–æ–¥–∏–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∏ —Å—ä—Å —Å—ä—â–∏—è –ø—Ä–∏—è—Ç–µ–ª)
 –ù–∞–ø–∏—à–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç, –∫–æ–π—Ç–æ –ø—Ä–∏–µ–º–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–µ–Ω –ø–æ–∑–∏—Ü–∏–æ–Ω–µ–Ω –∞—Ä–≥—É–º–µ–Ω—Ç-–∏–º–µ –Ω–∞ –ª–æ–≥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è(LOGDIR).
 –°–∫—Ä–∏–ø—Ç—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –∏–∑–≤–µ–∂–¥–∞ –¥–µ—Å–µ—Ç–∏–º–∞—Ç–∞ –ø—Ä–∏—è—Ç–µ–ª–∏, —Å –∫–æ–∏—Ç–æ –∏–º–∞—Ç–µ –Ω–∞–π-–º–Ω–æ–≥–æ —Ä–µ–¥–æ–≤–µ –∫–æ–º—É–Ω–∏–∫–∞—Ü–∏—è –≥–ª–æ–±–∞–ª–Ω–æ (–±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª –∏ –∞–∫–∞—É–Ω—Ç),
–∏ –∫–æ–ª–∫–æ —Ä–µ–¥–∞ –∏–º–∞—Ç–µ —Å –≤—Å–µ–∫–∏ –æ—Ç —Ç—è—Ö. –û–ø–∏—à–µ—Ç–µ –≤ –∫–æ–º–µ–Ω—Ç–∞—Ä –∫–∞–∫ —Ä–∞–±–æ—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç—ä–º—ä—Ç –≤–∏.

Solution:
#!/bin/bash

if [[ ${#} -ne 1 ]]; then
    echo "Illegal arguments count"
    exit 1
fi

if [[ ! -d ${1} ]]; then
    echo "Argument 1 must be a directory"
    exit 2
fi

fileName1=$(mktemp)
fileFriends=$(mktemp)

find "${1}" -mindepth 4 -maxdepth 4 -type f 2>/dev/null 1>"${fileName1}"

while read line; do
    dirname=$(dirname "${line}")
    friend=$(basename "${dirname}")
    echo ${friend} >> "${fileFriends}"

done < "${fileName1}"
cat ${fileFriends} | sort | uniq -c | head | awk '{print $2, $1}'

rm -f "${fileName1}"
rm -f "${fileFriends}"

------------------------------------

–ù–∞–ø–∏—à–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç, –∫–æ–π—Ç–æ –ø—Ä–∏–µ–º–∞ –¥–≤–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞‚Äì –∏–º–µ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏ —Ñ–∞–π–ª –∏
 –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è. –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ –Ω–µ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å—ä–¥—ä—Ä–∂–∞ –æ–±–µ–∫—Ç–∏, –∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—è—Ç —Ñ–∞–π–ª (US-ASCII) –µ —Å—Ç–µ–Ω–æ–≥—Ä–∞–º–∞
 –∏–≤—Å–µ–∫–∏ —Ä–µ–¥ –µ –≤—Å–ª–µ–¥–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç:
 –ò–ú–ï –§–ê–ú–ò–õ–ò–Ø (—É—Ç–æ—á–Ω–µ–Ω–∏—è): –†–µ–ø–ª–∏–∫–∞
 –∫—ä–¥–µ—Ç–æ:
 ‚Ä¢ –ò–ú–ï –§–ê–ú–ò–õ–ò–Ø –ø—Ä–∏—Å—ä—Å—Ç–≤–∞—Ç –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ;
 ‚Ä¢ (—É—Ç–æ—á–Ω–µ–Ω–∏—è)
 —Å–µ —Å—ä—Å—Ç–æ—è—Ç —Å–∞–º–æ –æ—Ç –º–∞–ª–∫–∏/–≥–ª–∞–≤–Ω–∏ –ª–∞—Ç–∏–Ω—Å–∫–∏ –±—É–∫–≤–∏ –∏ —Ç–∏—Ä–µ—Ç–∞;
 –Ω–µ –µ–∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ –¥–∞ –ø—Ä–∏—Å—ä—Å—Ç–≤–∞—Ç;
 ‚Ä¢ –¥–≤–æ–µ—Ç–æ—á–∏–µ—Ç–æ ‚Äò:‚Äô –ø—Ä–∏—Å—ä—Å—Ç–≤–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ;
 ‚Ä¢ –†–µ–ø–ª–∏–∫–∞ –≤ —Å—Ç—Ä–∏–Ω–≥–∞ –ø—Ä–µ–¥–∏ –¥–≤–æ–µ—Ç–æ—á–∏–µ—Ç–æ ‚Äò:‚Äô 
 ‚Ä¢ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ –∏–º–∞ –ø–æ–Ω–µ –µ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ò–ú–ï –∏ –§–ê–ú–ò–õ–ò–Ø

 ‚Ä¢ –Ω–∞–ª–∏—á–∏–µ—Ç–æ –Ω–∞–¥—Ä—É–≥–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∏ –∫—ä–¥–µ—Ç–æ –∏ –¥–∞ –µ –Ω–∞—Ä–µ–¥–∞ –µ –Ω–µ–¥–µ—Ñ–∏–Ω–∏—Ä–∞–Ω–æ.

 –ü—Ä–∏–º–µ—Ä–µ–Ω –≤—Ö–æ–¥–µ–Ω —Ñ–∞–π–ª:
 John Lennon (The Beatles): Time you enjoy wasting, was not wasted.
 Roger Waters: I'm in competition with myself and I'm losing.
 John Lennon:Reality leaves a lot to the imagination.
 Leonard Cohen:There is a crack in everything, that's how the light gets in.

 –°–∫—Ä–∏–ø—Ç—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞:
 ‚Ä¢ —Å—ä–∑–¥–∞–≤–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏ —Ñ–∞–π–ª dict.txt –≤ –ø–æ—Å–æ—á–µ–Ω–∞—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –∫–æ–π—Ç–æ –Ω–∞ –≤—Å–µ–∫–∏ —Ä–µ–¥ –¥–∞ —Å—ä–¥—ä—Ä–∂–∞:
 –ò–ú–ï –§–ê–ú–ò–õ–ò–Ø;–ù–û–ú–ï–†
 –∫—ä–¥–µ—Ç–æ:
‚Äì –ò–ú–ï –§–ê–ú–ò–õ–ò–Ø –µ —É–Ω–∏–∫–∞–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ –≤ —Å—Ç–µ–Ω–æ–≥—Ä–∞–º–∞—Ç–∞ (–±–µ–∑ –¥–∞ —Å–µ –æ—Ç—á–∏—Ç–∞—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è—Ç–∞);
‚Äì –ù–û–ú–ï–† –µ —É–Ω–∏–∫–∞–ª–µ–Ω –Ω–æ–º–µ—Ä –Ω–∞ —Ç–æ–∑–∏ —É—á–∞—Å—Ç–Ω–∏–∫, –∏–∑–±—Ä–∞–Ω –æ—Ç –≤–∞—Å.
 ‚Ä¢ —Å—ä–∑–¥–∞–≤–∞ —Ñ–∞–π–ª –ù–û–ú–ï–†.txt –∑–∞ –¥–∞–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫.

Solution:

#!/bin/bash

if [[ ${#} -ne 2 ]]; then
    echo "Illegal arguments count"
    exit 1
fi

if [[ ! -f "${1}" ]]; then
    echo "Argument 1 must be a file"
    exit 2
fi

if [[ ! -d "${2}" ]]; then
    echo "Argument 2 must be a directory"
    exit 3
fi

if [[ ! -z $(find "${2}" -mindepth 1) ]]; then
    echo "The directory must be empty"
    exit 4
fi

output=$(grep -E -o "^.*:" "${1}" | cut -d ':' -f 1 | cut -d '(' -f 1 | awk '{print $1, $2}' | sort | uniq | awk '{print $1, $2 ";" NR}')
echo "${output}" > "${2}/dict.txt"

while read line; do
    firstName=$(echo ${line} | cut -d ';' -f 1 | cut -d ' ' -f 1)
    secondName=$(echo ${line} | cut -d ';' -f 1 | cut -d ' ' -f 2)
    fileName=$(echo ${line} | cut -d ';' -f 2)
    path="${2}/${fileName}"
    grep -E "^${firstName}[ ]+${secondName}" "${1}" > "${path}"
done < <(echo "${output}")

------------------------------------
 –ó–∞–¥.342018-SE-03
–ù–∞–ø–∏—à–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç, –∫–æ–π—Ç–æ –ø—Ä–∏–µ–º–∞ –¥–≤–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ ‚Äì –∏–º–µ–Ω–∞ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏ —Ñ–∞–π–ª–æ–≤–µ –≤ CSV —Ñ–æ—Ä–º–∞—Ç:
 8,foo,bar,baz
 2,quz,,foo
 12,1,3,foo
 3,foo,,
 5,,bar,
 7,,,
 4,foo,bar,baz

 –í–∞–ª–∏–¥–Ω–∏ —Å–∞ —Å–ª–µ–¥–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏—è:
 ‚Ä¢ CSV —Ñ–∞–π–ª–æ–≤–µ—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–≤–∞—Ç —Ç–∞–±–ª–∏—Ü–∞, –∫–∞—Ç–æ –≤—Å–µ–∫–∏ —Ä–µ–¥ –Ω–∞ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ –µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –æ—Ç–¥–µ–ª–µ–Ω —Ä–µ–¥;
 ‚Ä¢ –Ω–∞ –¥–∞–¥–µ–Ω —Ä–µ–¥ –≤—Å—è–∫–æ –ø–æ–ª–µ (–∫–æ–ª–æ–Ω–∞) –µ —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –æ—Ç –æ—Å—Ç–∞–Ω–∞–ª–∏—Ç–µ —Å—ä—Å –∑–∞–ø–µ—Ç–∞—è;
 ‚Ä¢ –±—Ä–æ—è—Ç –Ω–∞ –ø–æ–ª–µ—Ç–∞—Ç–∞ –Ω–∞ –≤—Å–µ–∫–∏ —Ä–µ–¥ –µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞;
 ‚Ä¢ –≤ –ø–æ–ª–µ—Ç–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –¥–∞ –ø—Ä–∏—Å—ä—Å—Ç–≤–∞ –∑–∞–ø–µ—Ç–∞—è, —Ç.–µ., –∑–∞–ø–µ—Ç–∞—è—Ç–∞ –≤–∏–Ω–∞–≥–∏ –µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª –º–µ–∂–¥—É –ø–æ–ª–µ—Ç–∞;
 ‚Ä¢ –∞–∫–æ –≤—ä–≤ —Ñ–∞–π–ª–∞ –ø—Ä–∏—Å—ä—Å—Ç–≤–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∏, —Ç–æ —Ç–æ–≤–∞ —Å–∞ –¥–∞–Ω–Ω–∏ –æ—Ç –¥–∞–¥–µ–Ω–æ –ø–æ–ª–µ;
 ‚Ä¢ –ø—ä—Ä–≤–æ—Ç–æ –ø–æ–ª–µ –Ω–∞–≤—Å–µ–∫–∏ —Ä–µ–¥ –µ—á–∏—Å–ª–æ, –∫–æ–µ—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–≤–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞ —Ä–µ–¥–∞ (ID).
 –ü—Ä–∏–º–µ—Ä–Ω–æ –∏–∑–≤–∏–∫–≤–∞–Ω–µ: ./foo.sh a.csv b.csv
 
–°–∫—Ä–∏–ø—Ç—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ —á–µ—Ç–µ a.csv –∏ –Ω–∞ –Ω–µ–≥–æ–≤–∞ –±–∞–∑–∞ –¥–∞ —Å—ä–∑–¥–∞–≤–∞ b.csv –ø–æ —Å–ª–µ–¥–Ω–∏—è –Ω–∞—á–∏–Ω:
 ‚Ä¢ –Ω—è–∫–æ–∏ —Ä–µ–¥–æ–≤–µ –≤—ä–≤ —Ñ–∞–π–ª–∞ —Å–µ —Ä–∞–∑–ª–∏—á–∞–≤–∞—Ç —Å–∞–º–æ –ø–æ –∫–æ–ª–æ–Ω–∞—Ç–∞ ID –∏ –∑–∞ —Ç—è—Ö –∫–∞–∑–≤–∞–º–µ, —á–µ —Ñ–æ—Ä–º–∏—Ä–∞—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ ùê¥ùëñ
 ‚Ä¢ –∑–∞–≤—Å—è–∫–æ —Ç–∞–∫–æ–≤–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ ùê¥ùëñ –¥–∞ —Å–µ –æ—Å—Ç–∞–≤—è —Å–∞–º–æ –µ–¥–∏–Ω —Ä–µ–¥- —Ç–æ–∑–∏, —Å –Ω–∞–π-–º–∞–ª–∫–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –Ω–∞ ID-—Ç–æ;
 ‚Ä¢ —Ä–µ–¥–æ–≤–µ—Ç–µ, –∫–æ–∏—Ç–æ –Ω–µ —Å–∞ —á–ª–µ–Ω–æ–≤–µ –≤ –Ω—è–∫–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ ùê¥ùëñ —Å–µ –∑–∞–ø–∏—Å–≤–∞—Ç –≤ –∏–∑—Ö–æ–¥–Ω–∏—è —Ñ–∞–π–ª –±–µ–∑ –ø—Ä–æ–º—è–Ω–∞.

Solution:
#!/bin/bash

if [[ ${#} -ne 2 ]]; then
    echo "Illegal arguments count"
    exit 1
fi

if [[ ! -f "${1}" ]]; then
    echo "Argument 1 must be a file"
    exit 2
fi

if [[ ! -f "${2}" ]]; then
    echo "Argument 2 must be a file"
    exit 3
fi

rows=$(cat "${1}" | sort -t ',' -k 2 | sed -E "s:([1-9]+[0-9]*|0),:\1@:" | sort -V)
echo "${rows}" | awk -F '@' '{if (!($2 in min)) {min[$2]=999999} if (min[$2]>$1) {min[$2]=$1}} END {for (curr in min) {print min[curr], curr}}' > "${2}"

------------------------------------

–ó–∞–¥. 35 2019-SE-01
–ù–∞–ø–∏—à–µ—Ç–µ –¥–≤–∞ —Å–∫—Ä–∏–ø—Ç–∞ (–ø–æ –µ–¥–∏–Ω –∑–∞ –≤—Å—è–∫–∞ –ø–æ–¥—Ç–æ—á–∫–∞), –∫–æ–∏—Ç–æ —á–µ—Ç–∞—Ç —Ä–µ–¥–æ–≤–µ –æ—Ç STDIN.
–°–∫—Ä–∏–ø—Ç–æ–≤–µ—Ç–µ —Ç—Ä—è–±–≤–∞ –¥–∞ –æ–±—Ä–∞–±–æ—Ç–≤–∞—Ç —Å–∞–º–æ —Ä–µ–¥–æ–≤–µ—Ç–µ, –∫–æ–∏—Ç–æ —Å—ä–¥—ä—Ä–∂–∞—Ç —Ü–µ–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª–Ω–∏ –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª–Ω–∏ —á–∏—Å–ª–∞;
–æ—Å—Ç–∞–Ω–∞–ª–∏—Ç–µ —Ä–µ–¥–æ–≤–µ —Å–µ –∏–≥–Ω–æ—Ä–∏—Ä–∞—Ç. 
–°–∫—Ä–∏–ø—Ç–æ–≤–µ—Ç–µ —Ç—Ä—è–±–≤–∞ –¥–∞ –∏–∑–≤–µ–∂–¥–∞ –Ω–∞ STDOUT:
 –∞) –≤—Å–∏—á–∫–∏ —É–Ω–∏–∫–∞–ª–Ω–∏ —á–∏—Å–ª–∞, —á–∏—è—Ç–æ –∞–±—Å–æ–ª—é—Ç–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –µ —Ä–∞–≤–Ω–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª–Ω–∞—Ç–∞ –∞–±—Å–æ–ª—é—Ç–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç —Å—Ä–µ–¥ –≤—Å–∏—á–∫–∏ —á–∏—Å–ª–∞
 –±) –≤—Å–∏—á–∫–∏ –Ω–∞–π-–º–∞–ª–∫–∏ —É–Ω–∏–∫–∞–ª–Ω–∏ —á–∏—Å–ª–∞ –æ—Ç —Ç–µ–∑–∏, –∫–æ–∏—Ç–æ –∏–º–∞—Ç –º–∞–∫—Å–∏–º–∞–ª–Ω–∞ —Å—É–º–∞ –Ω–∞ —Ü–∏—Ñ—Ä–∏—Ç–µ —Å–∏

A)

Solution:
#!/bin/bash

maxAbsValue=-1
validLines=$(mktemp)

while read line; do
    if $(echo "${line}" | grep -q -E '^(|-)([1-9]+[0-9]*|0)(|.[1-9]+)$'); then
        maxAbsValue=$(echo "${line}" | awk -v currMax=${maxAbsValue} '{if (currMax<$1) {print $1} else if (currMax<-$1) {print -$1} else {print currMax}}')
        echo "${line}" >> "${validLines}"
    fi
done

cat "${validLines}" | sort | uniq | awk -v max="${maxAbsValue}" '$1==max || -$1==max {print $1}'
rm -f "${validLines}"



B)

Solution:
#!/bin/bash

function getDigitsSum {
    num=${1}
    num=$(echo ${num} | sed -E 's/[^0-9]//g' | sed -E 's/^0*//')
    sum=0
    while [[ $num -gt 0 ]]; do
        digit=$((num%10))
        sum=$((sum+digit))
        num=$((num/10))
    done
    echo "${sum}"
}

maxSum=-1

fileName1=$(mktemp)

while read line; do
    if $(echo "${line}" | grep -q -E "^((|-)([1-9]+[0-9]*|0))(|.[0-9]+)$"); then
        currSum=$(getDigitsSum ${line})
        maxSum=$(echo "${maxSum} ${currSum}" | awk '{if ($1 > $2) {print $1} else {print $2}}')
        if [[ ${maxSum} -eq ${currSum} ]]; then
            echo ${line} >> "${fileName1}"
        fi
    fi
done

cat "${fileName1}" | sort -n | head -n 1
rm -f "${fileName1}"


------------------------------------

–ó–∞–¥. 36 2019-SE-02 –ù–∞–ø–∏—à–µ—Ç–µ —à–µ–ª —Å–∫—Ä–∏–ø—Ç, –∫–æ–π—Ç–æ –ø—Ä–∏–µ–º–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏. –û–±—â –≤–∏–¥ –Ω–∞ –∏–∑–≤–∏–∫–≤–∞–Ω–µ:
./foo.sh [-n N] FILE1...

–í –æ–±—â–∏—è —Å–ª—É—á–∞–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—Ç–µ —Å–µ —Ç—Ä–µ—Ç–∏—Ä–∞—Ç –∫–∞—Ç–æ –∏–º–µ–Ω–∞ –Ω–∞ (.log) —Ñ–∞–π–ª–æ–≤–µ, –∫–æ–∏—Ç–æ —Ç—Ä—è–±–≤–∞ –¥–∞ –±—ä–¥–∞—Ç –æ–±—Ä–∞–±–æ—Ç–µ–Ω–∏ –æ—Ç —Å–∫—Ä–∏–ø—Ç–∞, —Å—ä—Å —Å–ª–µ–¥–Ω–æ—Ç–æ –∏–∑–∫–ª—é—á–µ–Ω–∏–µ: 
–∞–∫–æ –ø—ä—Ä–≤–∏—è—Ç –ø–∞—Ä–∞–º–µ—Ç—ä—Ä –µ —Å—Ç—Ä–∏–Ω–≥—ä—Ç -n, —Ç–æ –≤—Ç–æ—Ä–∏—è—Ç –ø–∞—Ä–∞–º–µ—Ç—ä—Ä –µ —á–∏—Å–ª–æ, –¥–µ—Ñ–∏–Ω–∏—Ä–∞—â–æ —Å—Ç–æ–π–Ω–æ—Å—Ç –Ω–∞ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∞—Ç–∞ N, –∫–æ—è—Ç–æ —â–µ –ø–æ–ª–∑–≤–∞–º–µ –≤ —Å–∫—Ä–∏–ø—Ç–∞. 
–í—ä–≤–µ–∂–¥–∞–º–µ –ø–æ–Ω—è—Ç–∏–µ—Ç–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞ —Ñ–∞–π–ª(–ò–î–§), –∫–æ–µ—Ç–æ —Å–µ —Å—ä—Å—Ç–æ–∏ –æ—Ç –∏–º–µ—Ç–æ –Ω–∞ –¥–∞–¥–µ–Ω —Ñ–∞–π–ª –±–µ–∑ —Ä–∞–∑—à–∏—Ä–µ–Ω–∏–µ—Ç–æ .log 
–ó–∞ —É–¥–æ–±—Å—Ç–≤–æ –ø—Ä–∏–µ–º–∞–º–µ, —á–µ —Å–∫—Ä–∏–ø—Ç—ä—Ç:
 ‚Ä¢ —â–µ –±—ä–¥–µ –∏–∑–≤–∏–∫–≤–∞–Ω —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∏–º–µ–Ω–∞ –Ω–∞ —Ñ–∞–π–ª–æ–≤–µ, –≤–∏–Ω–∞–≥–∏ –∑–∞–≤—ä—Ä—à–≤–∞—â–∏ –Ω–∞ .log
 ‚Ä¢ –Ω—è–º–∞ –¥–∞ –±—ä–¥–µ –∏–∑–≤–∏–∫–≤–∞–Ω —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∏–º–µ–Ω–∞ –Ω–∞ —Ñ–∞–π–ª–æ–≤–µ —Å –µ–¥–Ω–∞–∫—ä–≤ –ò–î–§.
 
–õ–æ–≥ —Ñ–∞–π–ª–æ–≤–µ—Ç–µ —Å–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏, –∫–∞—Ç–æ –≤—Å–µ–∫–∏ —Ä–µ–¥ –∏–º–∞ —Å–ª–µ–¥–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç:
 ‚Ä¢ –≤—Ä–µ–º–µ: timestamp –≤—ä–≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD HH:MM:SS
 ‚Ä¢ –∏–Ω—Ç–µ—Ä–≤–∞–ª
 ‚Ä¢ –¥–∞–Ω–Ω–∏: –ø–æ—Ä–µ–¥–∏—Ü–∞ –æ—Ç —Å–∏–º–≤–æ–ª–∏ —Å –ø—Ä–æ–∏–∑–≤–æ–ª–Ω–∞ –¥—ä–ª–∂–∏–Ω–∞
 –ó–∞ —É–¥–æ–±—Å—Ç–≤–æ –ø—Ä–∏–µ–º–∞–º–µ, —á–µ —Ä–µ–¥–æ–≤–µ—Ç–µ –≤—ä–≤ –≤—Å–µ–∫–∏ —Ñ–∞–π–ª —Å–∞ —Å–æ—Ä—Ç–∏—Ä–∞–Ω–∏ –ø–æ –≤—Ä–µ–º–µ –≤—ä–∑—Ö–æ–¥—è—â–æ.
 –ü—Ä–∏–º–µ—Ä–Ω–æ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ –Ω–∞ –¥–∞–¥–µ–Ω –ª–æ–≥ —Ñ–∞–π–ª:
 2019-05-05 06:26:54 orthanc rsyslogd: rsyslogd was HUPed
 2019-05-06 06:30:32 orthanc rsyslogd: rsyslogd was HUPed
 2019-05-06 10:48:29 orthanc kernel: [1725379.728871] Chrome_~dThread[876]: segfault

–°–∫—Ä–∏–ø—Ç—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –∏–∑–≤–µ–∂–¥–∞ –Ω–∞ STDOUT –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ N —Ä–µ–¥–∞ (–∞–∫–æ N –Ω–µ –µ –¥–µ—Ñ–∏–Ω–∏—Ä–∞–Ω–æ - 10 —Ä–µ–¥–∞) –æ—Ç –≤—Å–µ–∫–∏ —Ñ–∞–π–ª, –≤ —Å–ª–µ–¥–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç:
 ‚Ä¢ timestamp –≤—ä–≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD HH:MM:SS
 ‚Ä¢ –∏–Ω—Ç–µ—Ä–≤–∞–ª
 ‚Ä¢ –ò–î–§
 ‚Ä¢ –∏–Ω—Ç–µ—Ä–≤–∞–ª
 ‚Ä¢ –¥–∞–Ω–Ω–∏
 –ò–∑—Ö–æ–¥—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –±—ä–¥–µ –≥–ª–æ–±–∞–ª–Ω–æ —Å–æ—Ä—Ç–∏—Ä–∞–Ω –ø–æ –≤—Ä–µ–º–µ –≤—ä–∑—Ö–æ–¥—è—â–æ.

Solution:
#!/bin/bash

if [[ "${#}" -eq 0 ]]; then
    echo "The script cannot be run without arguments"
    exit 1
fi

count=10
if [[ "${1}" = "-n" ]]; then
    if [[ "${#}" -eq 1 ]]; then
        echo "-n must be followed by an argument"
        exit 2
    fi
    if ! $(echo "${2}" | grep -q -E "^([1-9]+[0-9]*|0)$"); then
        echo "-n must be followed b an argument number"
    fi
    count="${2}"
fi

tempFile=$(mktemp)

for filename in ${@}; do
    if ! $(echo "${filename}" | grep -q -E '.log$'); then
        continue
    fi
    idf=$(basename "${filename}" | rev | cut -c 5- | rev)
    cat "${filename}" | tail -n "${count}" | awk -v file="${idf}" '
    {
        for (i=1;i<=NF;i++) {
            printf "%s ", $i
            if (i == 2) {
                printf "%s ", file
            }
        }
    }

    {printf "\n"}' >> "${tempFile}"

done

cat "${tempFile}" | sort -t ' ' -k 2,2 -V
rm -f "${tempFile}"



------------------------------------
 –ó–∞–¥. 38 2020-SE-01

–°–∫—Ä–∏–ø—Ç—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ —Å—ä–∑–¥–∞–≤–∞ —Ñ–∞–π–ª–∞ bar.csv 
–Ω–∞ –±–∞–∑–∞ –Ω–∞ log —Ñ–∞–π–ª–æ–≤–µ—Ç–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞. 
–ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏—è—Ç CSV —Ñ–∞–π–ª –æ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –∫–æ—è—Ç–æ —Å—ä–¥—ä—Ä–∂–∞ —Å–∞–º–æ loz-gw.log –∏ border-lozenets.log –±–∏ –∏–∑–≥–ª–µ–∂–¥–∞–ª —Ç–∞–∫–∞:

 hostname,phy,vlans,hosts,failover,VPN-3DES-AES,peers,VLAN Trunk Ports,license,SN,key
 loz-gw,8,20,Unlimited,Active/Standby,Enabled,25,8,ASA 5505 Security Plus,JMX00000000,0e268e0c
 border-lozenets,4,16,Unlimited,Active/Active,Disabled,16,4,PIX 535,PIX5350007,0xd11b3d48

Solution:

#!/bin/bash

if [[ ${#} -ne 2 ]]; then
    echo "Illegal arguments count"
    exit 1
fi

if [[ ! -f ${1} ]]; then
    echo "Argument 1 must be a file"
    exit 2
fi

if [[ ! -d "${2}" ]]; then
    echo "Argument 2 must be a directory"
    exit 3
fi

filename="${1}"
dir="${2}"

header="hostname,phy,vlans,host,failover,VPN-3DES-AES,peers,VLAN Trunk Ports,license,SN,key"
echo ${header}

function getCorrectBits {
    if $(echo "${1}" | grep -q -E ': [^ ]+'); then
        echo "${1}" | cut -d ':' -f 2 | cut -d ' ' -f 2
    else
        echo "${1}" | cut -d ' ' -f 2- | rev | cut -d ' ' -f 2- | rev
    fi
}

function getInformation {
    filename="${1}"

    #first=$(cat "${filename}" | grep -E -o ': [^ ]+' | cut -d ':' -f 2 | cut -d ' ' -f 2)
    #second=$(cat "${filename}" | grep -E -o '(a|an) .+ license' | cut -d ' ' -f 2- | rev | cut -d ' ' -f 2- | rev)

    #cat "${filename}" | grep -E -o ': [^ ]+|(a|an) .+ license'
    tempFile=$(mktemp)

    while read line; do
        echo -n $(getCorrectBits "${line}")"," >> "${tempFile}"
    done < <(cat "${filename}" | grep -E -o ': [^ ]+|(a|an) .+ license')

    echo "" >> "${tempFile}"
    cat "${tempFile}" | rev | cut -c 2- | rev
    rm -f "${tempFile}"
}

logFiles=$(find "${dir}" -type f -name "*.log")
for line in ${logFiles}; do
    echo -n "$(echo $(basename "${line}") | rev | cut -c 5- | rev),"
    getInformation "${line}"
done

--------------------------------

–ó–∞–¥. 39 2020-SE-02
–ù–∞–ø–∏—à–µ—Ç–µ shell —Å–∫—Ä–∏–ø—Ç, –∫–æ–π—Ç–æ –ø—Ä–∏–µ–º–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—ä—Ä- –∏–º–µ –Ω–∞ —Ñ–∞–π–ª. –§–∞–π–ª—ä—Ç –µ
log —Ñ–∞–π–ª –Ω–∞ HTTP —Å—ä—Ä–≤—ä—Ä,–≤ –∫–æ–π—Ç–æ —Å–µ –∑–∞–ø–∏—Å–≤–∞—Ç –≤—Å–∏—á–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏ –æ—Ç —Å—ä—Ä–≤—ä—Ä–∞ request-–∏, –∫–æ–∏—Ç–æ –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ
—Å–∞ –∏–∑–ø—Ä–∞—Ç–∏–ª–∏. –§–∞–π–ª—ä—Ç –µ —Ç–µ–∫—Å—Ç–æ–≤–∏, –∫–∞—Ç–æ –Ω–∞ –≤—Å–µ–∫–∏ —Ä–µ–¥ –∏–º–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç —Å–ª–µ–¥–Ω–∏—è –≤–∏–¥:

Solution:
#!/bin/bash

if [[ ${#} -ne 1 ]]; then
    echo "Illegal arguments count"
    exit 1
fi

if [[ ! -f ${1} ]]; then
    echo "Argument 1 must be a file"
    exit 2
fi

filename="${1}"
top3Sites=$(cat "${filename}" | awk '{count[$2]+=1} END { for (site in count) { print count[site], site }}' | sort -t ' ' -k 1,1 -n -r | head -n 3)

function getHTTP2Count {
    site=${1}
    version="HTTP/2.0"

    cat "${filename}" | grep -E -o " ${site} .+ ${version} " | wc -l
}

function getTop5ClientsInfo {
    site=${1}
    cat "${filename}" | grep -E -o "^.* ${site} .*HTTP/... [0-9]{3}" | awk '$NF>302 {print $0}'
}
while read -r count site; do
    http2Count=$(getHTTP2Count "${site}")
    echo ${site} "HTTP/2.0:" "${http2Count}" "non-HTTP/2.0:" $((${count} - ${http2Count}))
    getTop5ClientsInfo "${site}" | cut -d ' ' -f 1 | sort | uniq -c
done < <(echo "${top3Sites}")

--------------------------------

–ó–∞–¥. 41 2020-SE-04
–ù–∞–ø–∏—à–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç, –∫–æ–π—Ç–æ –ø—Ä–∏–µ–º–∞ –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞- –∏–º–µ–Ω–∞ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏. –ü—ä—Ä–≤–∞—Ç–∞ (SRC)
 —Å—ä—â–µ—Å—Ç–≤—É–≤–∞, –¥–æ–∫–∞—Ç–æ –≤—Ç–æ—Ä–∞—Ç–∞ (DST) —Ç—Ä—è–±–≤–∞ –¥–∞ –±—ä–¥–µ —Å—ä–∑–¥–∞–¥–µ–Ω–∞ –æ—Ç —Å–∫—Ä–∏–ø—Ç–∞. –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ SRC –∏ –Ω–µ–π–Ω–∏—Ç–µ
 –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –º–æ–∂–µ –¥–∞ —Å—ä–¥—ä—Ä–∂–∞—Ç —Ñ–∞–π–ª–æ–≤–µ, —á–∏–∏—Ç–æ –∏–º–µ–Ω–∞ –∑–∞–≤—ä—Ä—à–∞—Ç –Ω–∞ .jpg. –ò–º–µ–Ω–∞—Ç–∞ –Ω–∞ —Ñ–∞–π–ª–æ–≤–µ—Ç–µ
 –º–æ–∂–µ –¥–∞ —Å—ä–¥—ä—Ä–∂–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∏, –∫–∞–∫—Ç–æ –∏ –ø–æ–¥–Ω–∏–∑–æ–≤–µ, –æ–≥—Ä–∞–¥–µ–Ω–∏ —Å—ä—Å —Å–∫–æ–±–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:
 A single (very ugly) tree (Outdoor treks) 2.jpg
 Falcons.jpg
 Gorgonzola (cheese).jpg
 Leeches (two different ones) (Outdoor treks).jpg
 Pom Pom Pom.jpg

 –ó–∞ –¥–∞–¥–µ–Ω –Ω–∏–∑ —â–µ –∫–∞–∑–≤–∞–º–µ, —á–µ –µ –ø–æ—á–∏—Å—Ç–µ–Ω, –∞–∫–æ –æ—Ç –Ω–µ–≥–æ —Å–∞ –ø—Ä–µ–º–∞—Ö–Ω–∞—Ç–∏ leading –∏ trailing –∏–Ω—Ç–µ—Ä–≤–∞–ª–∏—Ç–µ –∏
 –≤—Å–∏—á–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∏ —Å–∞ —Å–≤–µ–¥–µ–Ω–∏ –¥–æ –µ–¥–∏–Ω.
 –ó–∞ –≤—Å–µ–∫–∏ —Ñ–∞–π–ª –¥–µ—Ñ–∏–Ω–∏—Ä–∞–º–µ —Å–ª–µ–¥–Ω–∏—Ç–µ –∞—Ç—Ä–∏–±—É—Ç–∏:
 ‚Ä¢ –∑–∞–≥–ª–∞–≤–∏–µ- —á–∞—Å—Ç—Ç–∞ –æ—Ç –∏–º–µ—Ç–æ –ø—Ä–µ–¥–∏ .jpg
 , –±–µ–∑ –µ–ª–µ–º–µ–Ω—Ç–∏ –æ–≥—Ä–∞–¥–µ–Ω–∏ –≤ —Å–∫–æ–±–∏, –ø–æ—á–∏—Å—Ç–µ–Ω. 
–ü—Ä–∏–º–µ—Ä–∏:
 A single tree 2
 Falcons
 Gorgonzola
 Leeches
 Pom Pom Pom
 ‚Ä¢ –∞–ª–±—É–º-–ø–æ—Å–ª–µ–¥–Ω–∏—è—Ç –µ–ª–µ–º–µ–Ω—Ç –æ—Ç –∏–º–µ—Ç–æ, –∫–æ–π—Ç–æ –µ –±–∏–ª –æ–≥—Ä–∞–¥–µ–Ω –≤ —Å–∫–æ–±–∏, –ø–æ—á–∏—Å—Ç–µ–Ω.–ê–∫–æ –∞–ª–±—É–º –µ –ø—Ä–∞–∑–µ–Ω
 —Å—Ç—Ä–∏–Ω–≥, –ø–æ–ª–∑–≤–∞–º–µ —Å—Ç–æ–π–Ω–æ—Å—Ç –ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ misc
 . –ü—Ä–∏–º–µ—Ä–∏:
 Outdoor treks
 misc
 cheese
 Outdoor treks
 misc
 ‚Ä¢ –¥–∞—Ç–∞- –≤—Ä–µ–º–µ—Ç–æ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ –Ω–∞ —Ñ–∞–π–ª–∞, –≤—ä–≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM
DD
 ‚Ä¢ —Ö–µ—à- –ø—ä—Ä–≤–∏—Ç–µ 16 —Å–∏–º–≤–æ–ª–∞ –æ—Ç sha256 —Å—É–º–∞—Ç–∞ –Ω–∞ —Ñ–∞–π–ª–∞. –ó–∞–±–µ–ª–µ–∂–∫–∞: –ø—Ä–∏–µ–º–∞–º–µ, —á–µ –≤ —Ç–∞–∑–∏ –∏–¥–µ–∞–ª–Ω–∞
 –≤—Å–µ–ª–µ–Ω–∞ –ø—ä—Ä–≤–∏—Ç–µ 16 —Å–∏–º–≤–æ–ª–∞ –æ—Ç sha256 —Å—É–º–∞—Ç–∞ —Å–∞ —É–Ω–∏–∫–∞–ª–Ω–∏ –∑–∞ –≤—Å–µ–∫–∏ —Ñ–∞–π–ª –æ—Ç —Ç–µ–∑–∏, –∫–æ–∏—Ç–æ —â–µ —Å–µ
 –Ω–∞–ª–æ–∂–∏–¥–∞–æ–±—Ä–∞–±–æ—Ç–≤–∞–º–µ.
 –°–∫—Ä–∏–ø—Ç—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ —Å—ä–∑–¥–∞–≤–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è DST –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç –ø–æ–¥-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —Ñ–∞–π–ª–æ–≤–µ
 –∏symlink‚Äì–æ–≤–µ, —Ç–∞–∫–∞ —á–µ –¥–∞ —Å–∞ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏ —Å–ª–µ–¥–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –∑–∞ –≤—Å–µ–∫–∏ —Ñ–∞–π–ª –æ—Ç SRC:
 ‚Ä¢ DST/images/—Ö–µ—à.jpg- –∫–æ–ø–∏–µ –Ω–∞ —Å—ä–æ—Ç–≤–µ—Ç–Ω–∏—è —Ñ–∞–π–ª
 ‚Ä¢ —Å–ª–µ–¥–Ω–∏—Ç–µ –æ–±–µ–∫—Ç–∏ —Å–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª–Ω–∏ symlink‚Äì–æ–≤–µ –∫—ä–º —Ö–µ—à.jpg
 :‚Äì DST/by-date/–¥–∞—Ç–∞/by-album/–∞–ª–±—É–º/by-title/–∑–∞–≥–ª–∞–≤–∏–µ.jpg‚Äì DST/by-date/–¥–∞—Ç–∞/by-title/–∑–∞–≥–ª–∞–≤–∏–µ.jpg‚Äì DST/by-album/–∞–ª–±—É–º/by-date/–¥–∞—Ç–∞/by-title/–∑–∞–≥–ª–∞–≤–∏–µ.jpg‚Äì DST/by-album/–∞–ª–±—É–º/by-title/–∑–∞–≥–ª–∞–≤–∏–µ.jpg‚Äì DST/by-title/–∑–∞–≥–ª–∞–≤–∏–µ.jpg
Solution:
#!/bin/bash

if [[ ${#} -ne 2 ]]; then
    echo "Illegal arguments count"
    exit 1
fi

if [[ ! -d "${1}" ]]; then
    echo "Argument 1 must be directory"
    exit 2
fi

if [[ -e "${2}" ]]; then
    echo "Argument 2 must not exist"
    exit 3
fi

mkdir -p "$2/{images, by-date, by-album, by-title}"

function getName {
    filename="${1}"
    echo "${filename}" | sed -E "s:( |)\(.*\):"":g" | sed -E "s:[ ]+: :g" | rev | cut -c 5- | rev
}

function getAlbum {
    filename="${1}"
    echo "${filename}" | grep -E -o ".{0}\([^\(\)]+\)[^\(\)]*.jpg$" | cut -d ')' -f 1 | cut -c 2-
}

while read filename; do
    originalName="${filename}"
    filename=$(basename "${filename}")

    title=$(getName "${filename}")

    album=$(getAlbum "${filename}")
    if [[ -z "${album}" ]]; then
        album="misk"
    fi

    date=$(stat "${originalName}" -c "%y" | cut -d ' ' -f 1)
    hashValue=$(sha256sum "${originalName}" | cut -c -16)
    cp "${originalName}" "${2}/images/$hashValue.jpg"
    myFile="${2}/images/$hashValue.jpg"

    mkdir -p "${2}/by-date/$date/by-title"
    mkdir -p "${2}/by-date/$date/by-album/$album/by-title"
    mkdir -p "${2}/by-album/$album/by-date/$date/by-title"
    mkdir -p "${2}/by-album/$album/by-title"

    ln -s "${myFile}" "${2}/by-date/$date/by-title/$title.jpg"
    ln -s "${myFile}" "${2}/by-date/$date/by-album/$album/by-title/$title.jpg"
    ln -s "${myFile}" "${2}/by-album/$album/by-date/$date/by-title/$title.jpg"
    ln -s "${myFile}" "${2}/by-album/$album/by-title/$title.jpg"
    ln -s "${myFile}" "${2}/by-title/$title.jpg"

done < <(find "${1}" -type f -name "*.jpg")

------------------------------------
–ó–∞–¥. 42 2020-SE-05:
–ù–∞–ø–∏—à–µ—Ç–µ shell —Å–∫—Ä–∏–ø—Ç, –∫–æ–π—Ç–æ –ø—Ä–∏–µ–º–∞ 3 –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞‚Äì –¥–≤–µ –∏–º–µ–Ω–∞ –Ω–∞ —Ñ–∞–π–ª–æ–≤–µ –∏ –∏–º–µ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è.
–ü—Ä–∏–º–µ—Ä–Ω–æ –∏–∑–≤–∏–∫–≤–∞–Ω–µ:
$ ./foo.sh foo.pwd config.cfg cfgdir
–í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ cfgdir/ –∏ –Ω–µ–π–Ω–∏—Ç–µ –ø–æ–¥-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –º–æ–∂–µ –¥–∞ –∏–º–∞ —Ñ–∞–π–ª–æ–≤–µ —Å –∏–º–µ–Ω–∞ –∑–∞–≤—ä—Ä—à–≤–∞—â–∏ –Ω–∞ .cfg.
–ó–∞ –¥–∞ —Å–∞ –≤–∞–ª–∏–¥–Ω–∏, —Ç–µ–∑–∏ —Ñ–∞–π–ª–æ–≤–µ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å—ä–¥—ä—Ä–∂–∞—Ç —Ä–µ–¥–æ–≤–µ —Å–∞–º–æ –≤ —Å–ª–µ–¥–Ω–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∏ (—Ä–µ–¥–æ–≤–µ—Ç–µ–∑–∞–ø–æ—á–≤–∞—â–∏ —Å # —Å–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏):
# internal laboratory
{ no-production };

{ volatile };

# meow configs
{ run-all; };

–í—ä–≤ —Ñ–∞–π–ª–∞ foo.pwd –∏–º–∞ –æ–ø–∏—Å–∞–Ω–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∏ –∏–º–µ–Ω–∞ (username) –∏ MD5 —Ö–µ—à —Å—É–º–∏ –Ω–∞ –ø–∞—Ä–æ–ª–∏—Ç–µ –∏–º, —Å –ø–æ –µ–¥–∏–Ω –∑–∞–ø–∏—Å –Ω–∞ —Ä–µ–¥, –≤ —Å–ª–µ–¥–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç:
 username:password_hash
 –°—ä—â–æ —Ç–∞–∫–∞, —Ä–∞–∑–ø–æ–ª–∞–≥–∞—Ç–µ —Å –∫–æ–º–∞–Ω–¥–∞ pwgen, –∫–æ—è—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä–∞ –∏ –∏–∑–≤–µ–∂–¥–∞ –Ω–∞ STDOUT —Å–ª—É—á–∞–π–Ω–∏ –ø–∞—Ä–æ–ª–∏, –∏ –∑–Ω–∞–µ—Ç–µ, —á–µ –ø–æ–¥–¥—ä—Ä–∂–∞ —Å–ª–µ–¥–Ω–∏—Ç–µ –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞:
 $ pwgen [ password_length ] [ number_of_passwords ]

 –í–∞—à–∏—è—Ç —Å–∫—Ä–∏–ø—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –≤–∞–ª–∏–¥–∏—Ä–∞ cfg —Ñ–∞–π–ª–æ–≤–µ—Ç–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞, –∏ –∑–∞ —Ç–µ–∑–∏, –∫–æ–∏—Ç–æ –Ω–µ —Å–∞ –≤–∞–ª–∏–¥–Ω–∏, –¥–∞ –∏–∑–≤–µ–∂–¥–∞ –∏–º–µ—Ç–æ –Ω–∞ —Ñ–∞–π–ª–∞ –∏ –Ω–æ–º–µ—Ä–∏—Ä–∞–Ω–∏ —Ä–µ–¥–æ–≤–µ—Ç–µ, –∫–æ–∏—Ç–æ –∏–º–∞—Ç –ø—Ä–æ–±–ª–µ–º, –≤ —Å–ª–µ–¥–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç:
 Error in filename.cfg:
 Line 1:XXXX
 Line 37:YYYY
 –∫—ä–¥–µ—Ç–æ XXXX –∏ YYYY –µ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ –Ω–∞ —Å—ä–æ—Ç–≤–µ—Ç–Ω–∏—è —Ä–µ–¥.

 –ó–∞ –≤–∞–ª–∏–¥–Ω–∏—Ç–µ —Ñ–∞–π–ª–æ–≤–µ, —Å–∫—Ä–∏–ø—Ç—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞:
 ‚Ä¢ –≥–µ–Ω–µ—Ä–∏—Ä–∞ config.cfg –∫–∞—Ç–æ –æ–±–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ –∏–º;
 ‚Ä¢ –∏–º–µ—Ç–æ –Ω–∞ —Ñ–∞–π–ª–∞, –±–µ–∑ —á–∞—Å—Ç—Ç–∞ .cfg –¥–µ—Ñ–∏–Ω–∏—Ä–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ. 
–ê–∫–æ –≤—ä–≤ —Ñ–∞–π–ª–∞ —Å –ø–∞—Ä–æ–ª–∏—Ç–µ –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –∑–∞–ø–∏—Å –∑–∞ —Ç–æ–∑–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª, —Ç–æ —Ç–∞–∫—ä–≤ –¥–∞ —Å–µ –¥–æ–±–∞–≤–∏ –∏ 
–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—è –∏–∑—Ö–æ–¥ –¥–∞ —Å–µ –∏–∑–≤–µ–¥–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ—Ç–æ –∏–º–µ –∏ –ø–∞—Ä–æ–ª–∞—Ç–∞ (–ø–æ–Ω–µ 16 —Å–∏–º–≤–æ–ª–∞) —Ä–∞–∑–¥–µ–ª–µ–Ω–∏ —Å –µ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª.

Solution:
#!/bin/bash

if [[ ${#} -ne 3 ]]; then
    echo "Illegal arguments count"
    exit 1
fi

if [[ ! -f "${1}" ]]; then
    echo "Argument 1 must be a file"
    exit 2
fi

if [[ -e "${2}" ]]; then
    echo "Argument 2 must not exist"
    exit 3
fi

if [[ ! -d "${3}" ]]; then
    echo "Argument 3 must be a directory"
    exit 4
fi

cfgFiles=$(mktemp)
find "${3}" -type f -name "*.cfg" 2>/dev/null >> "${cfgFiles}"

function isValidFile {
    filename="${1}"
    errorsCount=0
    lineCount=0

    while read line; do
        lineCount=$((lineCount+1))
        if [[ -z "${line}" ]]; then
            continue
        fi

        if [[ "${line}" = "# internal laboratory" ]]; then
            lineCount=$((lineCount+1))
            read nextLine
            if [[ "${nextLine}" != "{ no-production };" ]]; then
                errorsCount=$((errorsCount+1))
                if [[ "$errorsCount" -eq 1 ]]; then
                    echo "Error in $(basename "${filename}")"
                fi
                echo "Line ${lineCount}:${nextLine}"
            fi

        elif [[ "${line}" = "# meow configs" ]]; then
            lineCount=$((lineCount+1))
            read nextLine
            if [[ "${nextLine}" != "{ run-all; };" ]]; then
                errorsCount=$((errorsCount+1))
                if [[ "${errorsCount}" -eq 1 ]]; then
                    echo "Error in $(basename "${filename}")"
                fi
                echo "Line ${lineCount}:${nextLine}"
            fi

        elif [[ "${line}" != "{ volatile };" && "${line}" != "# internal laboratory" && "${line}" != "# meow configs" ]]; then
            errorsCount=$((errorsCount+1))
            if [[ "${errorsCount}" -eq 1 ]]; then
                echo "Error in $(basename "${filename}")"
            fi
            echo "Line ${lineCount}:${line}"
        fi

    done < "${filename}"

}
while read file; do
    result=$(isValidFile "${file}")
    if [[ -n $(echo "${result}") ]]; then
        echo "${result}"
    else
        cat "${file}" >> "${2}"
        username=$(basename "${file}" | rev | cut -c 5- | rev)
        if ! grep -q -E "^${username}:" "${1}"; then
            password=$(pwgen 16 1)
            echo "${username}:${password}" >> "${1}"
            echo "${username}:${password}"
        fi
    fi


done < "${cfgFiles}"

rm -f "${cfgFiles}"


--------------------------

–ó–∞–¥. 43 2020-SE-06

Solution:
#!/bin/bash

if [[ ${#} -ne 3 ]]; then
    echo "Illegal arguments count"
    exit 1
fi

if [[ ! -f "${1}" ]]; then
    echo "Argument 1 must a file"
    exit 2
fi

key="${2}"
value="${3}"

date=$(date)
user=$(whoami)
newLine="${key} = ${value} # added at ${date} by ${user}"

sed -E -i "s|(^[ ]*${key}[ ]*=.*$)|\# \1 \# edited at ${date} by ${user}\n${newLine}|" "${1}"

if ! $(grep -q "^${newLine}$" "${1}"); then
    echo "${newLine}" >> "${1}"
fi
