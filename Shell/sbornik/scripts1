
Зад.17 2016-SE-01
Напишете shell скрипт, който по подаден един позиционен параметър,ако този параметър
 е директория, намира всички symlink-ове в нея и под-директориите ѝ с несъществуващ destination.

Solution:
#!/bin/bash

if [[ "${#}" -ne 1 ]]; then
    echo "Invalid arguments count!"
    exit 1
fi

if [[ ! -d "${1}" ]]; then
    echo "Not a valid directory!"
    exit 2
fi

find "${1}" -type l ! -exec test -e {} \; -print


--------------------------------------------------------
 Зад. 18 2016-SE-02
Напишете shell скрипт, който приема един позиционен параметър-число. 
Ако скриптът се изпълнява като root, да извежда обобщена информация за общото количество активна памет (RSS- resident set size, non-swapped physical memory that a task has used) на процесите на всеки потребител.
Ако за някой потребител обобщеното число надвишава подадения параметър,да изпраща подходящи сигнали за прекратяване на процеса с най-много активна памет на потребителя.

Solution:
#!/bin/bash

if [[ ${#} -ne 1 ]]; then
    echo "Illegal arguments count!"
    exit 1
fi

if ! echo "${1}" | grep -q -E '^([1-9]+[0-9]*|0)$'; then
    echo "The argument must be a number!"
    exit 2
fi

if [[ ! $(id -u) -ne 0 ]]; then
    echo "The script must be run by root"
    exit 3
fi

upperBoundRSS="${1}"
count=0

function calculateUserRSS {
    while read userRSS; do
        count=$((count + ${userRSS}))
    done < <(ps -u "${1}" -o rss=)
}

function killUsersMostActiveProcess {
    pid=$(ps -u "${1}" -o pid=,rss= | sort -n -r -t ' ' -k 2,2 | head -n 1 | cut -d ' ' -f 2)
    kill "${pid}"
}

while read processLine; do
    uid=$(echo "${processLine}" | cut -d ' ' -f 2)
    count=0
    calculateUserRSS "${uid}"
    echo "${uid}" has "${count}" RSS

    if [[ "${count}" -gt "${upperBoundRSS}" ]]; then
        echo "I AM IN"
        killUsersMostActiveProcess "${uid}"
    fi

done < <(ps -e -o uid= | sort -n | uniq | tr -s ' ')

--------------------------------------------------------
Зад. 19 2016-SE-03 
Напишете shell скрипт който, ако се изпълнява от root, проверява кои потребители на
 системата нямат homedir или не могат да пишат в него.

 Примерен формат:
 root:x:0:0:root:/root:/bin/bash
 daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
 bin:x:2:2:bin:/bin:/usr/sbin/nologin

Solution:
#!/bin/bash

if [[ $(id -u) -eq 0 ]]; then
    echo "Script must be run as root"
    exit 1
fi

# All users who don't have a home directory
cat /etc/passwd | awk -F ':' '$6 !~ /^\/home\// {print $1}'

# All users who don't W permission in their home directory
for homeDir in $(cat /etc/passwd | awk -F ':' '$6 ~ /^\/home\// {print $6}'); do
    perm=$(stat -c "%a" "${homeDir}" | cut -c 1)

    if [[ "${perm}" -eq 0 || "${perm}" -eq 1 || "${perm}" -eq 4 || "${perm}" -eq 5 ]]; then
        echo "${homeDir}"
        echo $(stat -c "%U" "${homeDir}")
    fi
done

--------------------------------------------------------

Зад. 20 2016-SE-04
В текущата директория има само обикновени файлове (без директории). Да се напише bash script, който приема 2 позиционни параметъра – числа, който мести файловете от текущата 
директория към нови директории (a, b и c, които трябва да бъдат създадени), като определен файл се мести:

към директория ’a’, само ако той има по-малко редове от първи позиционен параметър, мести
към директория ’b’, ако редове са между първи и втори позиционен параметър 
и в ’c’ в останалите случаи.

Solution:
#!/bin/bash

if [[ "${#}" -ne 2 ]]; then
    echo "Illegal arguments count"
    exit 1
fi

if ! echo ${1} | grep -q -E '^([1-9]+[0-9]*|0)$'; then
    echo "Argument 1 must be a number!"
    exit 2
fi

if ! echo ${2} | grep -q -E '^([1-9]+[0-9]*|0)$'; then
    echo "Argument 2 must be a number!"
    exit 3
fi

mkdir -p ./{a,b,c}

for file in $(realpath $(find . -type f)); do
    linesCount=$(cat "${file}" | wc -l)
    if [[ "${linesCount}" -lt "${1}" ]]; then
        mv "${file}" ./a
    elif [[ "${linesCount}" -ge "${1}" && "${linesCount}" -le "${2}" ]]; then
        mv "${file}" ./b
    else
        mv "${file}" ./c
    fi
done

--------------------------------------------------------
--------------------------------------------------------
--------------------------------------------------------
--------------------------------------------------------
--------------------------------------------------------
--------------------------------------------------------
--------------------------------------------------------

